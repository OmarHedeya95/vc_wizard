/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/python-shell/index.js
var require_python_shell = __commonJS({
  "node_modules/python-shell/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PythonShell = exports.NewlineTransformer = exports.PythonShellError = void 0;
    var events_1 = require("events");
    var child_process_1 = require("child_process");
    var os_1 = require("os");
    var path_1 = require("path");
    var stream_1 = require("stream");
    var fs_1 = require("fs");
    var util_1 = require("util");
    function toArray(source) {
      if (typeof source === "undefined" || source === null) {
        return [];
      } else if (!Array.isArray(source)) {
        return [source];
      }
      return source;
    }
    function extend(obj, ...args) {
      Array.prototype.slice.call(arguments, 1).forEach(function(source) {
        if (source) {
          for (let key in source) {
            obj[key] = source[key];
          }
        }
      });
      return obj;
    }
    function getRandomInt() {
      return Math.floor(Math.random() * 1e10);
    }
    var execPromise = (0, util_1.promisify)(child_process_1.exec);
    var PythonShellError = class extends Error {
    };
    exports.PythonShellError = PythonShellError;
    var NewlineTransformer = class extends stream_1.Transform {
      _transform(chunk, encoding, callback) {
        let data = chunk.toString();
        if (this._lastLineData)
          data = this._lastLineData + data;
        const lines = data.split(os_1.EOL);
        this._lastLineData = lines.pop();
        lines.forEach(this.push.bind(this));
        callback();
      }
      _flush(done) {
        if (this._lastLineData)
          this.push(this._lastLineData);
        this._lastLineData = null;
        done();
      }
    };
    exports.NewlineTransformer = NewlineTransformer;
    var PythonShell = class extends events_1.EventEmitter {
      constructor(scriptPath, options, stdoutSplitter = null, stderrSplitter = null) {
        super();
        function resolve(type, val) {
          if (typeof val === "string") {
            return PythonShell[type][val];
          } else if (typeof val === "function") {
            return val;
          }
        }
        if (scriptPath.trim().length == 0)
          throw Error("scriptPath cannot be empty! You must give a script for python to run");
        let self = this;
        let errorData = "";
        events_1.EventEmitter.call(this);
        options = extend({}, PythonShell.defaultOptions, options);
        let pythonPath2;
        if (!options.pythonPath) {
          pythonPath2 = PythonShell.defaultPythonPath;
        } else
          pythonPath2 = options.pythonPath;
        let pythonOptions = toArray(options.pythonOptions);
        let scriptArgs = toArray(options.args);
        this.scriptPath = (0, path_1.join)(options.scriptPath || "", scriptPath);
        this.command = pythonOptions.concat(this.scriptPath, scriptArgs);
        this.mode = options.mode || "text";
        this.formatter = resolve("format", options.formatter || this.mode);
        this.parser = resolve("parse", options.parser || this.mode);
        this.stderrParser = resolve("parse", options.stderrParser || "text");
        this.terminated = false;
        this.childProcess = (0, child_process_1.spawn)(pythonPath2, this.command, options);
        ["stdout", "stdin", "stderr"].forEach(function(name) {
          self[name] = self.childProcess[name];
          self.parser && self[name] && self[name].setEncoding(options.encoding || "utf8");
        });
        if (this.parser && this.stdout) {
          if (!stdoutSplitter)
            stdoutSplitter = new NewlineTransformer();
          stdoutSplitter.setEncoding(options.encoding || "utf8");
          this.stdout.pipe(stdoutSplitter).on("data", (chunk) => {
            this.emit("message", self.parser(chunk));
          });
        }
        if (this.stderrParser && this.stderr) {
          if (!stderrSplitter)
            stderrSplitter = new NewlineTransformer();
          stderrSplitter.setEncoding(options.encoding || "utf8");
          this.stderr.pipe(stderrSplitter).on("data", (chunk) => {
            this.emit("stderr", self.stderrParser(chunk));
          });
        }
        if (this.stderr) {
          this.stderr.on("data", function(data) {
            errorData += "" + data;
          });
          this.stderr.on("end", function() {
            self.stderrHasEnded = true;
            terminateIfNeeded();
          });
        } else {
          self.stderrHasEnded = true;
        }
        if (this.stdout) {
          this.stdout.on("end", function() {
            self.stdoutHasEnded = true;
            terminateIfNeeded();
          });
        } else {
          self.stdoutHasEnded = true;
        }
        this.childProcess.on("error", function(err) {
          self.emit("error", err);
        });
        this.childProcess.on("exit", function(code, signal) {
          self.exitCode = code;
          self.exitSignal = signal;
          terminateIfNeeded();
        });
        function terminateIfNeeded() {
          if (!self.stderrHasEnded || !self.stdoutHasEnded || self.exitCode == null && self.exitSignal == null)
            return;
          let err;
          if (self.exitCode && self.exitCode !== 0) {
            if (errorData) {
              err = self.parseError(errorData);
            } else {
              err = new PythonShellError("process exited with code " + self.exitCode);
            }
            err = extend(err, {
              executable: pythonPath2,
              options: pythonOptions.length ? pythonOptions : null,
              script: self.scriptPath,
              args: scriptArgs.length ? scriptArgs : null,
              exitCode: self.exitCode
            });
            if (self.listeners("pythonError").length || !self._endCallback) {
              self.emit("pythonError", err);
            }
          }
          self.terminated = true;
          self.emit("close");
          self._endCallback && self._endCallback(err, self.exitCode, self.exitSignal);
        }
        ;
      }
      static checkSyntax(code) {
        return __awaiter(this, void 0, void 0, function* () {
          const randomInt = getRandomInt();
          const filePath = (0, os_1.tmpdir)() + path_1.sep + `pythonShellSyntaxCheck${randomInt}.py`;
          const writeFilePromise = (0, util_1.promisify)(fs_1.writeFile);
          return writeFilePromise(filePath, code).then(() => {
            return this.checkSyntaxFile(filePath);
          });
        });
      }
      static getPythonPath() {
        return this.defaultOptions.pythonPath ? this.defaultOptions.pythonPath : this.defaultPythonPath;
      }
      static checkSyntaxFile(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
          const pythonPath2 = this.getPythonPath();
          let compileCommand = `${pythonPath2} -m py_compile ${filePath}`;
          return execPromise(compileCommand);
        });
      }
      static run(scriptPath, options, callback) {
        let pyshell = new PythonShell(scriptPath, options);
        let output = [];
        return pyshell.on("message", function(message) {
          output.push(message);
        }).end(function(err) {
          return callback(err ? err : null, output.length ? output : null);
        });
      }
      static runString(code, options, callback) {
        const randomInt = getRandomInt();
        const filePath = os_1.tmpdir + path_1.sep + `pythonShellFile${randomInt}.py`;
        (0, fs_1.writeFileSync)(filePath, code);
        return PythonShell.run(filePath, options, callback);
      }
      static getVersion(pythonPath2) {
        if (!pythonPath2)
          pythonPath2 = this.getPythonPath();
        return execPromise(pythonPath2 + " --version");
      }
      static getVersionSync(pythonPath2) {
        if (!pythonPath2)
          pythonPath2 = this.getPythonPath();
        return (0, child_process_1.execSync)(pythonPath2 + " --version").toString();
      }
      parseError(data) {
        let text = "" + data;
        let error;
        if (/^Traceback/.test(text)) {
          let lines = text.trim().split(os_1.EOL);
          let exception = lines.pop();
          error = new PythonShellError(exception);
          error.traceback = data;
          error.stack += os_1.EOL + "    ----- Python Traceback -----" + os_1.EOL + "  ";
          error.stack += lines.slice(1).join(os_1.EOL + "  ");
        } else {
          error = new PythonShellError(text);
        }
        return error;
      }
      send(message) {
        if (!this.stdin)
          throw new Error("stdin not open for writing");
        let data = this.formatter ? this.formatter(message) : message;
        if (this.mode !== "binary")
          data += os_1.EOL;
        this.stdin.write(data);
        return this;
      }
      end(callback) {
        if (this.childProcess.stdin) {
          this.childProcess.stdin.end();
        }
        this._endCallback = callback;
        return this;
      }
      kill(signal) {
        this.terminated = this.childProcess.kill(signal);
        return this;
      }
      terminate(signal) {
        return this.kill(signal);
      }
    };
    exports.PythonShell = PythonShell;
    PythonShell.defaultPythonPath = process.platform != "win32" ? "python3" : "python";
    PythonShell.defaultOptions = {};
    PythonShell.format = {
      text: function toText(data) {
        if (!data)
          return "";
        else if (typeof data !== "string")
          return data.toString();
        return data;
      },
      json: function toJson(data) {
        return JSON.stringify(data);
      }
    };
    PythonShell.parse = {
      text: function asText(data) {
        return data;
      },
      json: function asJson(data) {
        return JSON.parse(data);
      }
    };
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VCWizardPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// view.ts
var import_obsidian = require("obsidian");
var WIZARD_VIEW = "wizard-view";
var WizardView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
    this.icon = "sun";
  }
  getViewType() {
    return WIZARD_VIEW;
  }
  getDisplayText() {
    return "Example view";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h4", { text: "Related Ideas", cls: "heading" });
  }
  async update(search_results) {
    const container = this.containerEl.children[1];
    container.empty();
    const outerDiv = container.createEl("h4", { text: "Related Ideas\n", cls: "heading" });
    for (const key in search_results) {
      let source_name = key;
      let source_path = search_results[key]["source_path"];
      let text = search_results[key]["text"];
      const quote = container.createEl("blockquote", { text, cls: "quote" });
      const link = quote.createEl("a", { href: source_path, attr: { "data-path": source_path } });
      link.createEl("span", {
        text: "\n--" + source_name
      });
    }
  }
  async onClose() {
  }
};

// main.ts
var fs = __toESM(require("fs"));
var pythonPath = "";
var scriptPath_AI = "";
var affinityAPIKey = "";
var openaiAPIKey = "";
var owner_value = "10";
var connection_owner_field = "10";
var venture_network_list = "500";
async function summarize_selected_startup_text(editor, view) {
  const sel = editor.getSelection();
  let scriptPath = scriptPath_AI;
  const scriptName = "startup_summarizer_helper.py";
  var args = [sel, openaiAPIKey];
  new import_obsidian2.Notice("Summarizing...");
  const summary = await launch_python(pythonPath, scriptPath, scriptName, args);
  let new_summary = String(summary);
  new_summary = new_summary.replace(/,-/g, "\n-");
  console.log(`The startup summary:
 ${new_summary}`);
  const replacement = "#gpt_summarized, #review_startup \n" + new_summary + "\n# Stop Indexing \n## Notes\n" + sel;
  editor.replaceSelection(replacement);
}
async function launch_python(pythonPath2, scriptPath, scriptName, args) {
  let { PythonShell } = require_python_shell();
  const options = { mode: "text", pythonPath: pythonPath2, scriptPath, args };
  const result = await new Promise((resolve, reject) => {
    PythonShell.run(scriptName, options, function(err, results) {
      if (err)
        throw err;
      return resolve(results);
    });
  });
  return result;
}
async function summarize_vc_text(text) {
  const scriptPath = scriptPath_AI;
  const scriptName = "vc_summarizer_helper.py";
  let [title, substrings] = extract_title_and_note(text);
  let text_to_summarize = substrings[0] + "\n" + substrings[1];
  console.log(`Summarizing: ${title}`);
  var args = ["Notes:\n" + text_to_summarize + "Summary:\n", openaiAPIKey];
  const summary = await launch_python(pythonPath, scriptPath, scriptName, args);
  let new_summary = String(summary);
  new_summary = new_summary.replace(/,-/g, "\n-");
  title = title.toString();
  let leading_text = "";
  let replacement = "";
  let tailing_text = "";
  if (substrings) {
    leading_text = substrings[0] + "\n" + title + "\n";
    for (let substring of substrings.slice(1)) {
      tailing_text = tailing_text + "\n" + substring;
    }
    replacement = leading_text + "#gpt_summarized, #review \n" + new_summary + "\n# Stop Indexing \n## Notes\n" + tailing_text;
    return [replacement, new_summary, title];
  } else {
    return [text, text, ""];
  }
}
function create_notice() {
  new import_obsidian2.Notice("Nice to meet you!");
}
function extract_title_and_note(text) {
  let pattern = /^# .*\n/gm;
  let matches = text.match(pattern);
  let title = "";
  if (matches) {
    title = matches[0];
  }
  let substrings = text.split(pattern);
  console.log(`Title: ${title}`);
  console.log(substrings);
  return [title, substrings];
}
async function update_affinity(note, entity_name, scriptName) {
  const scriptPath = scriptPath_AI;
  if (scriptName == "affinity_vc_helper.py") {
    var args = [entity_name, note, affinityAPIKey, owner_value, connection_owner_field, venture_network_list];
  } else {
    var args = [entity_name, note, affinityAPIKey, owner_value];
  }
  console.log("Update Affinity");
  const response = await launch_python(pythonPath, scriptPath, scriptName, args);
  console.log(response);
  return response;
}
function vc_ready_for_affinity(file_content) {
  return file_content.includes("#gpt_summarized") && file_content.includes("#Affinity");
}
function startup_ready_for_affinity(file_content) {
  return file_content.includes("#startups/screened") && file_content.includes("#Affinity");
}
function notify_for_missing_people(person_name, response) {
  for (let item of response) {
    if (item.includes("Oops")) {
      new import_obsidian2.Notice(`Person: ${person_name} was not found`, 36e3);
      return true;
    }
  }
  return false;
}
function notify_for_missing_startups(startup_name, response) {
  for (let item of response) {
    if (item.includes("Error")) {
      new import_obsidian2.Notice(`Startup: ${startup_name} was found but could not be updated`, 36e3);
      return true;
    } else if (item.includes("Startup")) {
      new import_obsidian2.Notice(`Startup: ${startup_name} could not be found`, 36e3);
      return true;
    }
  }
  return false;
}
async function push_vcs_to_affinity() {
  const files = this.app.vault.getMarkdownFiles();
  for (let item of files) {
    let file_content = await this.app.vault.read(item);
    if (vc_ready_for_affinity(file_content)) {
      let [title, substrings] = extract_title_and_note(file_content);
      let summary = substrings[1];
      let person_name = String(title);
      let scriptName = "affinity_vc_helper.py";
      let response = await update_affinity(summary, person_name, scriptName);
      if (!notify_for_missing_people(person_name, response)) {
        new import_obsidian2.Notice(`VC: ${person_name} was updated on Affinity`);
        file_content = file_content.replace(/#Affinity/g, "");
        this.app.vault.modify(item, file_content);
      }
    }
  }
}
async function push_startups_to_affinity() {
  const files = this.app.vault.getMarkdownFiles();
  for (let item of files) {
    let file_content = await this.app.vault.read(item);
    if (startup_ready_for_affinity(file_content)) {
      let [title, substrings] = extract_title_and_note(file_content);
      let startup_name = String(title);
      let note = substrings[1];
      let scriptName = "affinity_startup_helper.py";
      let response = await update_affinity(note, startup_name, scriptName);
      if (!notify_for_missing_startups(startup_name, response)) {
        new import_obsidian2.Notice(`Startup: ${startup_name} was updated on Affinity`);
        file_content = file_content.replace(/#Affinity/g, "");
        this.app.vault.modify(item, file_content);
      }
    }
  }
  new import_obsidian2.Notice("Done!");
}
function is_summarizable(file_content) {
  return file_content.includes("#network/connected") && (file_content.includes("#Entity/VC") || file_content.includes("#Person/VC")) && file_content.includes("#gpt_summarized") != true && file_content.includes("dataview") != true;
}
function save_json(file_path, content) {
  const jsonString = JSON.stringify(content);
  fs.writeFile(file_path, jsonString, (err) => {
    if (err) {
      console.error(`Error saving the file: ${err}`);
      return;
    }
    console.log("File has been created");
  });
}
function append_to_json(file_path, key, value) {
  fs.readFile(file_path, (err, data) => {
    if (err) {
      throw err;
    }
    let oldData;
    try {
      oldData = JSON.parse(data);
    } catch (e) {
      oldData = {};
    }
    oldData[key] = value;
    const updatedJson = JSON.stringify(oldData);
    fs.writeFile(file_path, updatedJson, (err2) => {
      if (err2)
        throw err2;
      console.log("Data appended to file");
    });
  });
}
var DEFAULT_SETTINGS = {
  vaultPath: "default",
  affinityKey: "default",
  openAIKey: "default",
  owner_person_value: "10",
  connection_owner_field_id: "100",
  venture_network_list_id: "500",
  pythonPath: "<path-to-virtual-env>"
};
var VCWizardPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.status = this.addStatusBarItem();
    this.registerView(WIZARD_VIEW, (leaf) => new WizardView(leaf));
    this.app.workspace.onLayoutReady(() => {
      this.activateView();
      this.updateView([]);
    });
    this.registerEvent(this.app.vault.on("modify", (file) => this.register_file_change(file, "modified" /* modified */)));
    this.registerEvent(this.app.vault.on("delete", (file) => this.register_file_change(file, "deleted" /* deleted */)));
    this.addRibbonIcon("sun", "Omar Plugin", create_notice);
    this.addCommand({ id: "summarize-startup-command", name: "Summarize This Startup", editorCallback: (editor, view) => summarize_selected_startup_text(editor, view) });
    this.addCommand({ id: "index-vault", name: "Index Vault", callback: () => this.index_vault() });
    this.addCommand({ id: "index-changed-files", name: "Reindex New/Changed Files Only", callback: () => this.index_new_and_modified_files() });
    this.addCommand({ id: "find-similar-ideas", name: "Find Similar Ideas", editorCallback: (editor, view) => this.find_similar_ideas(editor, view) });
    this.addCommand({ id: "summarize-all-vc-command", name: "Summarize All VC Notes", callback: () => this.summarize_all_vc() });
    this.addCommand({ id: "affinity-vc", name: "Push VCs to Affinity", callback: () => push_vcs_to_affinity() });
    this.addCommand({ id: "affinity-startup", name: "Push Startups to Affinity", callback: () => push_startups_to_affinity() });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(WIZARD_VIEW);
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(WIZARD_VIEW);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: WIZARD_VIEW,
      active: true
    });
    this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(WIZARD_VIEW)[0]);
  }
  async updateView(results) {
    var _a;
    const view = (_a = this.app.workspace.getLeavesOfType(WIZARD_VIEW)[0]) == null ? void 0 : _a.view;
    if (view instanceof WizardView) {
      view.update(results);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    scriptPath_AI = this.settings.vaultPath + ".obsidian/plugins/vc_wizard";
    openaiAPIKey = this.settings.openAIKey;
    affinityAPIKey = this.settings.affinityKey;
    owner_value = this.settings.owner_person_value;
    connection_owner_field = this.settings.connection_owner_field_id;
    venture_network_list = this.settings.venture_network_list_id;
    pythonPath = this.settings.pythonPath;
  }
  async saveSettings() {
    await this.saveData(this.settings);
    scriptPath_AI = this.settings.vaultPath + ".obsidian/plugins/vc_wizard";
    openaiAPIKey = this.settings.openAIKey;
    affinityAPIKey = this.settings.affinityKey;
    owner_value = this.settings.owner_person_value;
    connection_owner_field = this.settings.connection_owner_field_id;
    venture_network_list = this.settings.venture_network_list_id;
    pythonPath = this.settings.pythonPath;
  }
  async summarize_all_vc() {
    const files = this.app.vault.getMarkdownFiles();
    for (let item of files) {
      let file_content = await this.app.vault.read(item);
      if (is_summarizable(file_content)) {
        console.log(`We are changing file: ${item.name}`);
        let [new_text, summary, title] = await summarize_vc_text(file_content);
        if (title != "") {
          this.app.vault.modify(item, new_text);
          new import_obsidian2.Notice(`${title} has been summarized`);
        }
      }
    }
  }
  async find_similar_ideas(editor, view) {
    const sel = editor.getSelection();
    new import_obsidian2.Notice("Search in progress...");
    let scriptPath = scriptPath_AI;
    const scriptName = "similar_ideas.py";
    var args = [sel, openaiAPIKey, this.settings.vaultPath];
    const similar_ideas = await launch_python(pythonPath, scriptPath, scriptName, args);
    let search_results = await this.extract_title_and_path(similar_ideas);
    this.updateView(search_results);
  }
  async register_file_change(file, type) {
    let scriptPath = scriptPath_AI;
    const scriptName = "index_vault.py";
    const plugin_path = scriptPath_AI;
    let base_name = file.name.split(".md")[0];
    let file_path = this.settings.vaultPath + file.path;
    let storage_path = plugin_path + "/modified_paths.json";
    if (type == "modified" /* modified */) {
      let value = { "change_type": "modified" /* modified */, "full_path": file_path };
      append_to_json(storage_path, base_name, value);
    } else if (type == "deleted" /* deleted */) {
      new import_obsidian2.Notice(`${base_name} has been deleted`);
      let value = { "change_type": "deleted" /* deleted */, "full_path": file_path };
      append_to_json(storage_path, base_name, value);
    } else if (type == "new" /* new */) {
      new import_obsidian2.Notice(`${base_name} has been created`);
      let value = { "change_type": "new" /* new */, "full_path": file_path };
      append_to_json(storage_path, base_name, value);
    }
  }
  async index_new_and_modified_files() {
    const plugin_path = scriptPath_AI;
    let storage_path = plugin_path + "/modified_paths.json";
    fs.readFile(storage_path, async (err, data) => {
      if (err) {
        throw err;
      }
      let files_to_modify;
      new import_obsidian2.Notice("Will read changed files now..");
      try {
        files_to_modify = JSON.parse(data);
        console.log(files_to_modify);
      } catch (e) {
        new import_obsidian2.Notice("No new notes to index");
        return;
      }
      if (Object.keys(files_to_modify).length < 1) {
        new import_obsidian2.Notice("No new notes to index");
        return;
      }
      try {
        await this.index_files(storage_path);
      } catch (e) {
        new import_obsidian2.Notice("There was an error while indexing!");
        return;
      }
      new import_obsidian2.Notice("Finished indexing!");
      save_json(storage_path, {});
    });
  }
  async index_vault() {
    let files = this.app.vault.getMarkdownFiles();
    let file_paths = {};
    let vault_path = this.settings.vaultPath;
    const plugin_path = scriptPath_AI;
    new import_obsidian2.Notice("Started indexing the full vault!");
    for (let file of files) {
      if (file.path.includes("Readwise")) {
        file_paths[file.basename] = { "change_type": "new" /* new */, "full_path": vault_path + file.path };
      }
    }
    console.log(`Files length: ${file_paths.length}`);
    const json_path = plugin_path + "/file_paths.json";
    save_json(json_path, file_paths);
    try {
      await this.index_files(json_path);
    } catch (e) {
      new import_obsidian2.Notice("There was an error while indexing!");
      return;
    }
    new import_obsidian2.Notice("Finished indexing!");
    save_json(json_path, {});
  }
  async index_files(json_path) {
    let scriptPath = scriptPath_AI;
    const scriptName = "index_vault.py";
    const plugin_path = scriptPath_AI;
    var args = [json_path, openaiAPIKey, plugin_path];
    let results = await launch_python(pythonPath, scriptPath, scriptName, args);
    console.log(results);
    return results;
  }
  async extract_title_and_path(results) {
    var _a;
    let counter = 0;
    let search_results = {};
    let current_filename = (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.basename;
    console.log(`current filename: ${current_filename}`);
    for (let result of results) {
      if (counter % 3 == 0 && counter != 0) {
        let sentence = '"' + results.at(counter) + '"';
        let source = results.at(counter + 2);
        source = source == null ? void 0 : source.split(":")[1].trim();
        console.log(`counter: ${counter}, This source: ${source}`);
        if (source == current_filename) {
          counter = counter + 1;
          continue;
        }
        let source_file = await this.get_path_by_name(source);
        console.log(source_file);
        if (source_file != null && source != null) {
          let obsidian_path = "obsidian://advanced-uri?vault=";
          obsidian_path = obsidian_path + this.app.vault.getName() + "&filepath=";
          obsidian_path = obsidian_path + source_file.path;
          console.log(`my source path: ${obsidian_path}`);
          search_results[source] = { "source_path": obsidian_path, "text": sentence };
        }
      }
      counter = counter + 1;
    }
    return search_results;
  }
  async get_path_by_name(source) {
    let all_files = this.app.vault.getMarkdownFiles();
    for (let file of all_files) {
      let filename = file.basename;
      if (filename == source) {
        return file;
      }
    }
    return null;
  }
};
var SampleSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for your butler" });
    new import_obsidian2.Setting(containerEl).setName("Obsidian Vault Path").setDesc("The path to the vault where you wish to use the plugin").addText((text) => text.setPlaceholder("Enter path").setValue(this.plugin.settings.vaultPath).onChange(async (value) => {
      console.log("path: " + value);
      this.plugin.settings.vaultPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("OpenAI API Key").setDesc("Your OpenAI API Key").addText((text) => text.setPlaceholder("Enter key").setValue(this.plugin.settings.openAIKey).onChange(async (value) => {
      console.log("Open AI key: " + value);
      this.plugin.settings.openAIKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Affinity: API Key").setDesc("Your Affinity API Key").addText((text) => text.setPlaceholder("Enter key").setValue(this.plugin.settings.affinityKey).onChange(async (value) => {
      console.log("key: " + value);
      this.plugin.settings.affinityKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Affinity: Owner Value").setDesc("Every person has a code on Affinity. Please give in the code for the person that should be added as owner of startups and VCs that gets pushed").addText((text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.owner_person_value).onChange(async (value) => {
      console.log("Owner value: " + value);
      this.plugin.settings.owner_person_value = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Affinity: Connection Owner Field ID").setDesc("Depending on the list you save fellow VCs in, there is a field that represent the 'connection owner with the fund', enter the field id here").addText((text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.connection_owner_field_id).onChange(async (value) => {
      console.log("Connection Owner Field ID value: " + value);
      this.plugin.settings.connection_owner_field_id = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Affinity: Venture Network List ID").setDesc("Please enter the list id for the list you save your relationships with VCs in").addText((text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.venture_network_list_id).onChange(async (value) => {
      console.log("Venture network list id: " + value);
      this.plugin.settings.venture_network_list_id = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Python Virtual Environment Path").setDesc("The path to python virtual environment").addText((text) => text.setPlaceholder("Enter path").setValue(this.plugin.settings.pythonPath).onChange(async (value) => {
      console.log("PythonPath: " + value);
      this.plugin.settings.pythonPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
