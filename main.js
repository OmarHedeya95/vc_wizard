/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/python-shell/index.js
var require_python_shell = __commonJS({
  "node_modules/python-shell/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PythonShell = exports.NewlineTransformer = exports.PythonShellError = void 0;
    var events_1 = require("events");
    var child_process_1 = require("child_process");
    var os_1 = require("os");
    var path_1 = require("path");
    var stream_1 = require("stream");
    var fs_1 = require("fs");
    var util_1 = require("util");
    function toArray(source) {
      if (typeof source === "undefined" || source === null) {
        return [];
      } else if (!Array.isArray(source)) {
        return [source];
      }
      return source;
    }
    function extend(obj, ...args) {
      Array.prototype.slice.call(arguments, 1).forEach(function(source) {
        if (source) {
          for (let key in source) {
            obj[key] = source[key];
          }
        }
      });
      return obj;
    }
    function getRandomInt() {
      return Math.floor(Math.random() * 1e10);
    }
    var execPromise = (0, util_1.promisify)(child_process_1.exec);
    var PythonShellError = class extends Error {
    };
    exports.PythonShellError = PythonShellError;
    var NewlineTransformer = class extends stream_1.Transform {
      _transform(chunk, encoding, callback) {
        let data = chunk.toString();
        if (this._lastLineData)
          data = this._lastLineData + data;
        const lines = data.split(os_1.EOL);
        this._lastLineData = lines.pop();
        lines.forEach(this.push.bind(this));
        callback();
      }
      _flush(done) {
        if (this._lastLineData)
          this.push(this._lastLineData);
        this._lastLineData = null;
        done();
      }
    };
    exports.NewlineTransformer = NewlineTransformer;
    var PythonShell = class extends events_1.EventEmitter {
      constructor(scriptPath, options, stdoutSplitter = null, stderrSplitter = null) {
        super();
        function resolve(type, val) {
          if (typeof val === "string") {
            return PythonShell[type][val];
          } else if (typeof val === "function") {
            return val;
          }
        }
        if (scriptPath.trim().length == 0)
          throw Error("scriptPath cannot be empty! You must give a script for python to run");
        let self = this;
        let errorData = "";
        events_1.EventEmitter.call(this);
        options = extend({}, PythonShell.defaultOptions, options);
        let pythonPath2;
        if (!options.pythonPath) {
          pythonPath2 = PythonShell.defaultPythonPath;
        } else
          pythonPath2 = options.pythonPath;
        let pythonOptions = toArray(options.pythonOptions);
        let scriptArgs = toArray(options.args);
        this.scriptPath = (0, path_1.join)(options.scriptPath || "", scriptPath);
        this.command = pythonOptions.concat(this.scriptPath, scriptArgs);
        this.mode = options.mode || "text";
        this.formatter = resolve("format", options.formatter || this.mode);
        this.parser = resolve("parse", options.parser || this.mode);
        this.stderrParser = resolve("parse", options.stderrParser || "text");
        this.terminated = false;
        this.childProcess = (0, child_process_1.spawn)(pythonPath2, this.command, options);
        ["stdout", "stdin", "stderr"].forEach(function(name) {
          self[name] = self.childProcess[name];
          self.parser && self[name] && self[name].setEncoding(options.encoding || "utf8");
        });
        if (this.parser && this.stdout) {
          if (!stdoutSplitter)
            stdoutSplitter = new NewlineTransformer();
          stdoutSplitter.setEncoding(options.encoding || "utf8");
          this.stdout.pipe(stdoutSplitter).on("data", (chunk) => {
            this.emit("message", self.parser(chunk));
          });
        }
        if (this.stderrParser && this.stderr) {
          if (!stderrSplitter)
            stderrSplitter = new NewlineTransformer();
          stderrSplitter.setEncoding(options.encoding || "utf8");
          this.stderr.pipe(stderrSplitter).on("data", (chunk) => {
            this.emit("stderr", self.stderrParser(chunk));
          });
        }
        if (this.stderr) {
          this.stderr.on("data", function(data) {
            errorData += "" + data;
          });
          this.stderr.on("end", function() {
            self.stderrHasEnded = true;
            terminateIfNeeded();
          });
        } else {
          self.stderrHasEnded = true;
        }
        if (this.stdout) {
          this.stdout.on("end", function() {
            self.stdoutHasEnded = true;
            terminateIfNeeded();
          });
        } else {
          self.stdoutHasEnded = true;
        }
        this.childProcess.on("error", function(err) {
          self.emit("error", err);
        });
        this.childProcess.on("exit", function(code, signal) {
          self.exitCode = code;
          self.exitSignal = signal;
          terminateIfNeeded();
        });
        function terminateIfNeeded() {
          if (!self.stderrHasEnded || !self.stdoutHasEnded || self.exitCode == null && self.exitSignal == null)
            return;
          let err;
          if (self.exitCode && self.exitCode !== 0) {
            if (errorData) {
              err = self.parseError(errorData);
            } else {
              err = new PythonShellError("process exited with code " + self.exitCode);
            }
            err = extend(err, {
              executable: pythonPath2,
              options: pythonOptions.length ? pythonOptions : null,
              script: self.scriptPath,
              args: scriptArgs.length ? scriptArgs : null,
              exitCode: self.exitCode
            });
            if (self.listeners("pythonError").length || !self._endCallback) {
              self.emit("pythonError", err);
            }
          }
          self.terminated = true;
          self.emit("close");
          self._endCallback && self._endCallback(err, self.exitCode, self.exitSignal);
        }
        ;
      }
      static checkSyntax(code) {
        return __awaiter(this, void 0, void 0, function* () {
          const randomInt = getRandomInt();
          const filePath = (0, os_1.tmpdir)() + path_1.sep + `pythonShellSyntaxCheck${randomInt}.py`;
          const writeFilePromise = (0, util_1.promisify)(fs_1.writeFile);
          return writeFilePromise(filePath, code).then(() => {
            return this.checkSyntaxFile(filePath);
          });
        });
      }
      static getPythonPath() {
        return this.defaultOptions.pythonPath ? this.defaultOptions.pythonPath : this.defaultPythonPath;
      }
      static checkSyntaxFile(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
          const pythonPath2 = this.getPythonPath();
          let compileCommand = `${pythonPath2} -m py_compile ${filePath}`;
          return execPromise(compileCommand);
        });
      }
      static run(scriptPath, options, callback) {
        let pyshell = new PythonShell(scriptPath, options);
        let output = [];
        return pyshell.on("message", function(message) {
          output.push(message);
        }).end(function(err) {
          return callback(err ? err : null, output.length ? output : null);
        });
      }
      static runString(code, options, callback) {
        const randomInt = getRandomInt();
        const filePath = os_1.tmpdir + path_1.sep + `pythonShellFile${randomInt}.py`;
        (0, fs_1.writeFileSync)(filePath, code);
        return PythonShell.run(filePath, options, callback);
      }
      static getVersion(pythonPath2) {
        if (!pythonPath2)
          pythonPath2 = this.getPythonPath();
        return execPromise(pythonPath2 + " --version");
      }
      static getVersionSync(pythonPath2) {
        if (!pythonPath2)
          pythonPath2 = this.getPythonPath();
        return (0, child_process_1.execSync)(pythonPath2 + " --version").toString();
      }
      parseError(data) {
        let text = "" + data;
        let error;
        if (/^Traceback/.test(text)) {
          let lines = text.trim().split(os_1.EOL);
          let exception = lines.pop();
          error = new PythonShellError(exception);
          error.traceback = data;
          error.stack += os_1.EOL + "    ----- Python Traceback -----" + os_1.EOL + "  ";
          error.stack += lines.slice(1).join(os_1.EOL + "  ");
        } else {
          error = new PythonShellError(text);
        }
        return error;
      }
      send(message) {
        if (!this.stdin)
          throw new Error("stdin not open for writing");
        let data = this.formatter ? this.formatter(message) : message;
        if (this.mode !== "binary")
          data += os_1.EOL;
        this.stdin.write(data);
        return this;
      }
      end(callback) {
        if (this.childProcess.stdin) {
          this.childProcess.stdin.end();
        }
        this._endCallback = callback;
        return this;
      }
      kill(signal) {
        this.terminated = this.childProcess.kill(signal);
        return this;
      }
      terminate(signal) {
        return this.kill(signal);
      }
    };
    exports.PythonShell = PythonShell;
    PythonShell.defaultPythonPath = process.platform != "win32" ? "python3" : "python";
    PythonShell.defaultOptions = {};
    PythonShell.format = {
      text: function toText(data) {
        if (!data)
          return "";
        else if (typeof data !== "string")
          return data.toString();
        return data;
      },
      json: function toJson(data) {
        return JSON.stringify(data);
      }
    };
    PythonShell.parse = {
      text: function asText(data) {
        return data;
      },
      json: function asJson(data) {
        return JSON.parse(data);
      }
    };
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VCWizardPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// view.ts
var import_obsidian = require("obsidian");
var WIZARD_VIEW = "wizard-view";
var WizardView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return WIZARD_VIEW;
  }
  getDisplayText() {
    return "Example view";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h4", { text: "Example view" });
  }
  async update(search_results) {
    const container = this.containerEl.children[1];
    container.empty();
    const outerDiv = container.createEl("h4", { text: "Results\n" });
    for (const key in search_results) {
      let source_name = key;
      let source_path = search_results[key]["source_path"];
      let text = search_results[key]["text"];
      const quote = container.createEl("blockquote", { text, cls: "quote" });
      const link = quote.createEl("a", { href: source_path, attr: { "data-path": source_path } });
      link.createEl("span", {
        text: "\n--" + source_name
      });
    }
  }
  async onClose() {
  }
};

// main.ts
var fs = __toESM(require("fs"));
var pythonPath = "";
var scriptPath_AI = "";
var affinityAPIKey = "";
var openaiAPIKey = "";
var owner_value = "10";
var connection_owner_field = "10";
var venture_network_list = "500";
async function summarize_selected_startup_text(editor, view) {
  const sel = editor.getSelection();
  let scriptPath = scriptPath_AI;
  const scriptName = "startup_summarizer_helper.py";
  var args = [sel, openaiAPIKey];
  new import_obsidian2.Notice("Summarizing...");
  const summary = await launch_python(pythonPath, scriptPath, scriptName, args);
  let new_summary = String(summary);
  new_summary = new_summary.replace(/,-/g, "\n-");
  console.log(`The startup summary:
 ${new_summary}`);
  const replacement = "#gpt_summarized, #review_startup \n" + new_summary + "\n# Stop Indexing \n## Notes\n" + sel;
  editor.replaceSelection(replacement);
}
async function launch_python(pythonPath2, scriptPath, scriptName, args) {
  let { PythonShell } = require_python_shell();
  const options = { mode: "text", pythonPath: pythonPath2, scriptPath, args };
  const result = await new Promise((resolve, reject) => {
    PythonShell.run(scriptName, options, function(err, results) {
      if (err)
        throw err;
      return resolve(results);
    });
  });
  return result;
}
async function summarize_vc_text(text) {
  const scriptPath = scriptPath_AI;
  const scriptName = "vc_summarizer_helper.py";
  let [title, substrings] = extract_title_and_note(text);
  let text_to_summarize = substrings[0] + "\n" + substrings[1];
  console.log(`Summarizing: ${title}`);
  var args = ["Notes:\n" + text_to_summarize + "Summary:\n", openaiAPIKey];
  const summary = await launch_python(pythonPath, scriptPath, scriptName, args);
  let new_summary = String(summary);
  new_summary = new_summary.replace(/,-/g, "\n-");
  title = title.toString();
  let leading_text = "";
  let replacement = "";
  let tailing_text = "";
  if (substrings) {
    leading_text = substrings[0] + "\n" + title + "\n";
    for (let substring of substrings.slice(1)) {
      tailing_text = tailing_text + "\n" + substring;
    }
    replacement = leading_text + "#gpt_summarized, #review \n" + new_summary + "\n# Stop Indexing \n## Notes\n" + tailing_text;
    return [replacement, new_summary, title];
  } else {
    return [text, text, ""];
  }
}
function create_notice() {
  new import_obsidian2.Notice("Nice to meet you!");
}
function extract_title_and_note(text) {
  let pattern = /^# .*\n/gm;
  let matches = text.match(pattern);
  let title = "";
  if (matches) {
    title = matches[0];
  }
  let substrings = text.split(pattern);
  console.log(`Title: ${title}`);
  console.log(substrings);
  return [title, substrings];
}
async function update_affinity(note, entity_name, scriptName) {
  const scriptPath = scriptPath_AI;
  if (scriptName == "affinity_vc_helper.py") {
    var args = [entity_name, note, affinityAPIKey, owner_value, connection_owner_field, venture_network_list];
  } else {
    var args = [entity_name, note, affinityAPIKey, owner_value];
  }
  console.log("Update Affinity");
  const response = await launch_python(pythonPath, scriptPath, scriptName, args);
  console.log(response);
  return response;
}
function vc_ready_for_affinity(file_content) {
  return file_content.includes("#gpt_summarized") && file_content.includes("#Affinity");
}
function startup_ready_for_affinity(file_content) {
  return file_content.includes("#startups/screened") && file_content.includes("#Affinity");
}
function notify_for_missing_people(person_name, response) {
  for (let item of response) {
    if (item.includes("Oops")) {
      new import_obsidian2.Notice(`Person: ${person_name} was not found`, 36e3);
      return true;
    }
  }
  return false;
}
function notify_for_missing_startups(startup_name, response) {
  for (let item of response) {
    if (item.includes("Error")) {
      new import_obsidian2.Notice(`Startup: ${startup_name} was found but could not be updated`, 36e3);
      return true;
    } else if (item.includes("Startup")) {
      new import_obsidian2.Notice(`Startup: ${startup_name} could not be found`, 36e3);
      return true;
    }
  }
  return false;
}
async function push_vcs_to_affinity() {
  const files = this.app.vault.getMarkdownFiles();
  for (let item of files) {
    let file_content = await this.app.vault.read(item);
    if (vc_ready_for_affinity(file_content)) {
      let [title, substrings] = extract_title_and_note(file_content);
      let summary = substrings[1];
      let person_name = String(title);
      let scriptName = "affinity_vc_helper.py";
      let response = await update_affinity(summary, person_name, scriptName);
      if (!notify_for_missing_people(person_name, response)) {
        new import_obsidian2.Notice(`VC: ${person_name} was updated on Affinity`);
        file_content = file_content.replace(/#Affinity/g, "");
        this.app.vault.modify(item, file_content);
      }
    }
  }
}
async function push_startups_to_affinity() {
  const files = this.app.vault.getMarkdownFiles();
  for (let item of files) {
    let file_content = await this.app.vault.read(item);
    if (startup_ready_for_affinity(file_content)) {
      let [title, substrings] = extract_title_and_note(file_content);
      let startup_name = String(title);
      let note = substrings[1];
      let scriptName = "affinity_startup_helper.py";
      let response = await update_affinity(note, startup_name, scriptName);
      if (!notify_for_missing_startups(startup_name, response)) {
        new import_obsidian2.Notice(`Startup: ${startup_name} was updated on Affinity`);
        file_content = file_content.replace(/#Affinity/g, "");
        this.app.vault.modify(item, file_content);
      }
    }
  }
  new import_obsidian2.Notice("Done!");
}
function is_summarizable(file_content) {
  return file_content.includes("#network/connected") && (file_content.includes("#Entity/VC") || file_content.includes("#Person/VC")) && file_content.includes("#gpt_summarized") != true && file_content.includes("dataview") != true;
}
function save_json(file_path, content) {
  const jsonString = JSON.stringify(content);
  fs.writeFile(file_path, jsonString, (err) => {
    if (err) {
      console.error(err);
      return;
    }
    console.log("File has been created");
  });
}
var DEFAULT_SETTINGS = {
  vaultPath: "default",
  affinityKey: "default",
  openAIKey: "default",
  owner_person_value: "10",
  connection_owner_field_id: "100",
  venture_network_list_id: "500",
  pythonPath: "<path-to-virtual-env>"
};
var VCWizardPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.status = this.addStatusBarItem();
    this.registerView(WIZARD_VIEW, (leaf) => new WizardView(leaf));
    this.app.workspace.onLayoutReady(() => {
      this.activateView();
      this.updateView([]);
    });
    this.addRibbonIcon("sun", "Omar Plugin", create_notice);
    this.addCommand({ id: "summarize-startup-command", name: "Summarize This Startup", editorCallback: (editor, view) => summarize_selected_startup_text(editor, view) });
    this.addCommand({ id: "index-vault", name: "Index Vault", callback: () => this.index_vault() });
    this.addCommand({ id: "find-similar-ideas", name: "Find Similar Ideas", editorCallback: (editor, view) => this.find_similar_ideas(editor, view) });
    this.addCommand({ id: "summarize-all-vc-command", name: "Summarize All VC Notes", callback: () => this.summarize_all_vc() });
    this.addCommand({ id: "affinity-vc", name: "Push VCs to Affinity", callback: () => push_vcs_to_affinity() });
    this.addCommand({ id: "affinity-startup", name: "Push Startups to Affinity", callback: () => push_startups_to_affinity() });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(WIZARD_VIEW);
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(WIZARD_VIEW);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: WIZARD_VIEW,
      active: true
    });
    this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(WIZARD_VIEW)[0]);
  }
  async updateView(results) {
    var _a;
    const view = (_a = this.app.workspace.getLeavesOfType(WIZARD_VIEW)[0]) == null ? void 0 : _a.view;
    if (view instanceof WizardView) {
      view.update(results);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    scriptPath_AI = this.settings.vaultPath + ".obsidian/plugins/vc_wizard";
    openaiAPIKey = this.settings.openAIKey;
    affinityAPIKey = this.settings.affinityKey;
    owner_value = this.settings.owner_person_value;
    connection_owner_field = this.settings.connection_owner_field_id;
    venture_network_list = this.settings.venture_network_list_id;
    pythonPath = this.settings.pythonPath;
  }
  async saveSettings() {
    await this.saveData(this.settings);
    scriptPath_AI = this.settings.vaultPath + ".obsidian/plugins/vc_wizard";
    openaiAPIKey = this.settings.openAIKey;
    affinityAPIKey = this.settings.affinityKey;
    owner_value = this.settings.owner_person_value;
    connection_owner_field = this.settings.connection_owner_field_id;
    venture_network_list = this.settings.venture_network_list_id;
    pythonPath = this.settings.pythonPath;
  }
  async summarize_all_vc() {
    const files = this.app.vault.getMarkdownFiles();
    for (let item of files) {
      let file_content = await this.app.vault.read(item);
      if (is_summarizable(file_content)) {
        console.log(`We are changing file: ${item.name}`);
        let [new_text, summary, title] = await summarize_vc_text(file_content);
        if (title != "") {
          this.app.vault.modify(item, new_text);
          new import_obsidian2.Notice(`${title} has been summarized`);
        }
      }
    }
  }
  async find_similar_ideas(editor, view) {
    const sel = editor.getSelection();
    new import_obsidian2.Notice("Search in progres...");
    let scriptPath = scriptPath_AI;
    const scriptName = "similar_ideas.py";
    var args = [sel, openaiAPIKey, this.settings.vaultPath];
    console.log(args);
    console.log(pythonPath);
    console.log(scriptPath), console.log(scriptName);
    const similar_ideas = await launch_python(pythonPath, scriptPath, scriptName, args);
    console.log(similar_ideas);
    let search_results = await this.extract_title_and_path(similar_ideas);
    console.log("Search results:\n");
    console.log(search_results);
    this.updateView(search_results);
  }
  async index_vault() {
    let files = this.app.vault.getMarkdownFiles();
    let scriptPath = scriptPath_AI;
    const scriptName = "index_vault.py";
    const plugin_path = scriptPath_AI;
    let file_paths = [];
    for (let file of files) {
      if (file.path.includes("Second Brain") || file.path.includes("Readwise")) {
        file_paths.push(file.path);
      }
    }
    const json_path = plugin_path + "/file_paths.json";
    save_json(json_path, file_paths);
    var args = [json_path, openaiAPIKey, plugin_path];
  }
  async extract_title_and_path(results) {
    var _a;
    let counter = 0;
    let search_results = {};
    let current_filename = (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.basename;
    console.log(`current filename: ${current_filename}`);
    for (let result of results) {
      if (counter % 3 == 0 && counter != 0) {
        let sentence = '"' + results.at(counter) + '"';
        let source = results.at(counter + 2);
        source = source == null ? void 0 : source.split(":")[1].trim();
        console.log(`counter: ${counter}, This source: ${source}`);
        if (source == current_filename) {
          counter = counter + 1;
          continue;
        }
        let source_file = await this.get_path_by_name(source);
        console.log(source_file);
        if (source_file != null && source != null) {
          let obsidian_path = "obsidian://advanced-uri?vault=";
          obsidian_path = obsidian_path + this.app.vault.getName() + "&filepath=";
          obsidian_path = obsidian_path + source_file.path;
          console.log(`my source path: ${obsidian_path}`);
          search_results[source] = { "source_path": obsidian_path, "text": sentence };
        }
      }
      counter = counter + 1;
    }
    return search_results;
  }
  async get_path_by_name(source) {
    let all_files = this.app.vault.getMarkdownFiles();
    for (let file of all_files) {
      let filename = file.basename;
      if (filename == source) {
        return file;
      }
    }
    return null;
  }
};
var SampleSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for your butler" });
    new import_obsidian2.Setting(containerEl).setName("Obsidian Vault Path").setDesc("The path to the vault where you wish to use the plugin").addText((text) => text.setPlaceholder("Enter path").setValue(this.plugin.settings.vaultPath).onChange(async (value) => {
      console.log("path: " + value);
      this.plugin.settings.vaultPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("OpenAI API Key").setDesc("Your OpenAI API Key").addText((text) => text.setPlaceholder("Enter key").setValue(this.plugin.settings.openAIKey).onChange(async (value) => {
      console.log("Open AI key: " + value);
      this.plugin.settings.openAIKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Affinity: API Key").setDesc("Your Affinity API Key").addText((text) => text.setPlaceholder("Enter key").setValue(this.plugin.settings.affinityKey).onChange(async (value) => {
      console.log("key: " + value);
      this.plugin.settings.affinityKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Affinity: Owner Value").setDesc("Every person has a code on Affinity. Please give in the code for the person that should be added as owner of startups and VCs that gets pushed").addText((text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.owner_person_value).onChange(async (value) => {
      console.log("Owner value: " + value);
      this.plugin.settings.owner_person_value = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Affinity: Connection Owner Field ID").setDesc("Depending on the list you save fellow VCs in, there is a field that represent the 'connection owner with the fund', enter the field id here").addText((text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.connection_owner_field_id).onChange(async (value) => {
      console.log("Connection Owner Field ID value: " + value);
      this.plugin.settings.connection_owner_field_id = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Affinity: Venture Network List ID").setDesc("Please enter the list id for the list you save your relationships with VCs in").addText((text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.venture_network_list_id).onChange(async (value) => {
      console.log("Venture network list id: " + value);
      this.plugin.settings.venture_network_list_id = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Python Virtual Environment Path").setDesc("The path to python virtual environment").addText((text) => text.setPlaceholder("Enter path").setValue(this.plugin.settings.pythonPath).onChange(async (value) => {
      console.log("PythonPath: " + value);
      this.plugin.settings.pythonPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3B5dGhvbi1zaGVsbC9pbmRleC50cyIsICJtYWluLnRzIiwgInZpZXcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbbnVsbCwgImltcG9ydCB7IEFwcCwgRWRpdG9yLCBNYXJrZG93blZpZXcsIE1vZGFsLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgTWVudSwgTWVudUl0ZW0sIE1hcmtkb3duRmlsZUluZm8sIFRGaWxlfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBXaXphcmRWaWV3LCBXSVpBUkRfVklFVyB9IGZyb20gJ3ZpZXcnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuXG5sZXQgcHl0aG9uUGF0aCA9ICcnXG5sZXQgc2NyaXB0UGF0aF9BSSA9ICcnXG5sZXQgYWZmaW5pdHlBUElLZXkgPSAnJ1xubGV0IG9wZW5haUFQSUtleSA9ICcnXG5sZXQgb3duZXJfdmFsdWUgPSAnMTAnXG5sZXQgY29ubmVjdGlvbl9vd25lcl9maWVsZCA9ICcxMCdcbmxldCB2ZW50dXJlX25ldHdvcmtfbGlzdCA9ICc1MDAnXG5cblxuXG5hc3luYyBmdW5jdGlvbiBzdW1tYXJpemVfc2VsZWN0ZWRfc3RhcnR1cF90ZXh0KGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXd8TWFya2Rvd25GaWxlSW5mbyl7XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiB0YWtlcyB0aGUgc2VsZWN0ZWQgdGV4dCBmcm9tIGEgc3RhcnR1cCwgc3VtbWFyaXplcyBpdCwgYW5kIHRoZW4gcHV0cyBpdCBiYWNrIGluIHRoZSBmaWxlXG4gICAgICogVGhlIFwiZnVsbC10ZXh0XCIgZ2V0cyBhcHBlbmVkIGFmdGVyIHRoZSBoZWFkaW5nICcjIFN0b3AgSW5kZXhpbmcnIHN1Y2ggdGhhdCBpdCBpcyBub3QgaW5kZXhlZCBhbnltb3JlIGJ5IHRoZSBlbWJlZGRpbmcgZW5naW5lXG4gICAgICogVGhpcyBhbHNvIGhlbHBzIHRvIGF2b2lkIHB1c2hpbmcgYWxsIG9mIHRoZSBjb252b2x1dGVkIHRleHQgaW50byBBZmZpbml0eSBsYXRlciBvblxuICAgICAqL1xuICAgIGNvbnN0IHNlbCA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKVxuICAgIC8vY29uc29sZS5sb2coYFlvdXIgVGV4dDogJHtzZWx9YClcbiAgICBsZXQgc2NyaXB0UGF0aCA9IHNjcmlwdFBhdGhfQUlcbiAgICBjb25zdCBzY3JpcHROYW1lID0gJ3N0YXJ0dXBfc3VtbWFyaXplcl9oZWxwZXIucHknXG4gICAgdmFyIGFyZ3MgPSBbc2VsLCBvcGVuYWlBUElLZXldXG4gICAgbmV3IE5vdGljZShcIlN1bW1hcml6aW5nLi4uXCIpXG4gICAgLy9XZSBkZWNsYXJlIGdldF9zZWxlY3RlZF90ZXh0IGFzIGEgZnVuY3Rpb24gdGhhdCBcIldBSVRTXCIgKGFzeW5jKSwgYW5kIHdlIHdhaXQgZm9yIHRoZSByZXN1bHQgaGVyZVxuICAgIGNvbnN0IHN1bW1hcnkgPSBhd2FpdCBsYXVuY2hfcHl0aG9uKHB5dGhvblBhdGgsIHNjcmlwdFBhdGgsIHNjcmlwdE5hbWUsIGFyZ3MpXG5cbiAgICBsZXQgbmV3X3N1bW1hcnk6IHN0cmluZyA9IFN0cmluZyhzdW1tYXJ5KVxuICAgIC8vQ3JlYXRlIG5ldyBsaW5lcyBpbiB0aGUgc3VtbWFyeSAoc29tZWhvdyBpdCBnZXRzIGxvc3QgYmV0d2VlbiBQeXRob24gYW5kIEphdmFzY3JpcHQpXG4gICAgbmV3X3N1bW1hcnkgPSBuZXdfc3VtbWFyeS5yZXBsYWNlKC8sLS9nLCAnXFxuLScpXG4gICAgY29uc29sZS5sb2coYFRoZSBzdGFydHVwIHN1bW1hcnk6XFxuICR7bmV3X3N1bW1hcnl9YClcblxuICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gJyNncHRfc3VtbWFyaXplZCwgI3Jldmlld19zdGFydHVwIFxcbicrIG5ld19zdW1tYXJ5ICsgJ1xcbicgKyAnIyBTdG9wIEluZGV4aW5nIFxcbiMjIE5vdGVzXFxuJyArIHNlbFxuICAgIGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKHJlcGxhY2VtZW50KVxuXG59XG5cblxuXG5hc3luYyBmdW5jdGlvbiBsYXVuY2hfcHl0aG9uKHB5dGhvblBhdGg6IHN0cmluZywgc2NyaXB0UGF0aDogc3RyaW5nLCBzY3JpcHROYW1lOiBzdHJpbmcsIGFyZ3M6IGFueSl7XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBsYXVuY2hlcyBhIHB5dGhvbiBzY3JpcHQgd2l0aCB0aGUgY29ycmVjdCBweXRob24gdmlydHVhbCBlbnZpcm9ubWVudCBhbmQgcmV0dXJucyB3aGF0ZXZlciB0aGUgcHl0aG9uIHNjcmlwdCBwcmludHMhISAobm8gdmFsdWUgcGFzc2luZywgdGFrZSBjYXJlKVxuICAgICAqL1xuICAgIGxldCB7UHl0aG9uU2hlbGx9ID0gcmVxdWlyZSgncHl0aG9uLXNoZWxsJylcbiAgICBjb25zdCBvcHRpb25zID0ge21vZGU6ICd0ZXh0JywgcHl0aG9uUGF0aDogcHl0aG9uUGF0aCwgc2NyaXB0UGF0aDogc2NyaXB0UGF0aCwgYXJnczogYXJnc31cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBQeXRob25TaGVsbC5ydW4oc2NyaXB0TmFtZSwgb3B0aW9ucywgZnVuY3Rpb24gKGVycjogRXJyb3IsIHJlc3VsdHM6IGFueSkge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0XG5cbn1cblxuYXN5bmMgZnVuY3Rpb24gc3VtbWFyaXplX3ZjX3RleHQodGV4dDogc3RyaW5nKXtcbiAgICAvKipcbiAgICAgKiBHaXZlbiB0aGUgZnVsbCB0ZXh0IGluIGEgVkMgbm90ZSwgdGhpcyBmdW5jdGlvbiBzdW1tYXJpemVzIHRoZSBpbXBvcnRhbnQgcGFydCAoYmVmb3JlICMgU3RvcCBJbmRleGluZykgYW5kIHJldHVybnMgdGhlIG5ldyBmdWxsIHRleHQgdGhhdCBzaG91bGQgYmUgd3JpdHRlbiB0byB0aGUgZmlsZVxuICAgICAqIFRoZSBmdWxsIHRleHQgaW5jbHVkZXMgdGhlIG1ldGEgZGF0YSBhbmQgdGFncyBpbmZvcm1hdGlvbiBiZWZvcmUgdGhlIHRpdGxlLCB0aGUgdGl0bGUsIHRoZSBzdW1tYXJ5LCBhbmQgYWRkcyB0aGUgY29yZSBkYXRhIGFmdGVyIHRoZSBoZWFkaW5nIFwiIyBTdG9wIEluZGV4aW5nXCJcbiAgICAgKi9cbiAgICBjb25zdCBzY3JpcHRQYXRoID0gc2NyaXB0UGF0aF9BSVxuICAgIGNvbnN0IHNjcmlwdE5hbWUgPSAndmNfc3VtbWFyaXplcl9oZWxwZXIucHknXG5cbiAgICAvLyBXZSBzaG91bGQgc3VtbWFyaXplIG9ubHkgaW5mb3JtYXRpb24gdGhhdCBpcyBiZWZvcmUgJyMgU3RvcCBJbmRleGluZydcbiAgICBsZXQgW3RpdGxlLCBzdWJzdHJpbmdzXSA9IGV4dHJhY3RfdGl0bGVfYW5kX25vdGUodGV4dClcbiAgICBsZXQgdGV4dF90b19zdW1tYXJpemUgPSBzdWJzdHJpbmdzWzBdICsgJ1xcbicgKyBzdWJzdHJpbmdzWzFdXG5cbiAgICBjb25zb2xlLmxvZyhgU3VtbWFyaXppbmc6ICR7dGl0bGV9YClcbiAgICAvL2NvbnNvbGUubG9nKFwiVGV4dCB0byBzdW1tYXJpemU6IFwiKVxuICAgIC8vY29uc29sZS5sb2codGV4dF90b19zdW1tYXJpemUpXG5cbiAgICB2YXIgYXJncyA9IFsnTm90ZXM6XFxuJyArIHRleHRfdG9fc3VtbWFyaXplICsgJ1N1bW1hcnk6XFxuJywgb3BlbmFpQVBJS2V5XSAvL3RleHRcbiAgICAvL1dlIGRlY2xhcmUgZ2V0X3NlbGVjdGVkX3RleHQgYXMgYSBmdW5jdGlvbiB0aGF0IFwiV0FJVFNcIiAoYXN5bmMpLCBhbmQgd2Ugd2FpdCBmb3IgdGhlIHJlc3VsdCBoZXJlXG4gICAgXG4gICAgY29uc3Qgc3VtbWFyeSA9IGF3YWl0IGxhdW5jaF9weXRob24ocHl0aG9uUGF0aCwgc2NyaXB0UGF0aCwgc2NyaXB0TmFtZSwgYXJncylcbiAgICBsZXQgbmV3X3N1bW1hcnk6IHN0cmluZyA9IFN0cmluZyhzdW1tYXJ5KVxuICAgIC8vU2VwYXJhdGUgZGlmZmVyZW50IGJ1bGxldCBwb2ludHNcbiAgICBuZXdfc3VtbWFyeSA9IG5ld19zdW1tYXJ5LnJlcGxhY2UoLywtL2csICdcXG4tJylcblxuICAgIFxuICAgIHRpdGxlID0gdGl0bGUudG9TdHJpbmcoKVxuICAgIGxldCBsZWFkaW5nX3RleHQgPSAnJ1xuICAgIGxldCByZXBsYWNlbWVudCA9ICcnXG4gICAgbGV0IHRhaWxpbmdfdGV4dCA9ICcnXG5cbiAgICAvKmNvbnNvbGUubG9nKGBUaXRsZTogJHt0aXRsZX1gKVxuICAgIGNvbnNvbGUubG9nKGBCZWZvcmUgdGhlIHRpdGxlOlxcbiR7c3Vic3RyaW5nc1swXX1gKVxuICAgIGNvbnNvbGUubG9nKGBBZnRlciB0aGUgdGl0bGU6ICR7c3Vic3RyaW5nc1sxXX1gKSovXG5cbiAgICBpZihzdWJzdHJpbmdzKXtcbiAgICAgICAgbGVhZGluZ190ZXh0ID0gc3Vic3RyaW5nc1swXSArICdcXG4nICsgdGl0bGUgKyAnXFxuJ1xuICAgICAgICBmb3IgKGxldCBzdWJzdHJpbmcgb2Ygc3Vic3RyaW5ncy5zbGljZSgxKSl7XG4gICAgICAgICAgICB0YWlsaW5nX3RleHQgPSB0YWlsaW5nX3RleHQgKyAnXFxuJyArIHN1YnN0cmluZ1xuICAgICAgICB9XG4gICAgICAgIHJlcGxhY2VtZW50ID0gbGVhZGluZ190ZXh0ICsgJyNncHRfc3VtbWFyaXplZCwgI3JldmlldyBcXG4nKyBuZXdfc3VtbWFyeSArICdcXG4nICsgJyMgU3RvcCBJbmRleGluZyBcXG4jIyBOb3Rlc1xcbicgKyB0YWlsaW5nX3RleHRcbiAgICAgICAgcmV0dXJuIFtyZXBsYWNlbWVudCwgbmV3X3N1bW1hcnksIHRpdGxlXVxuICAgIH1cbiAgICBlbHNle1xuICAgICAgICByZXR1cm4gW3RleHQsIHRleHQsICcnXVxuXG4gICAgfVxuXG4gICAgXG59XG5cblxuZnVuY3Rpb24gY3JlYXRlX25vdGljZSgpe1xuICAgIG5ldyBOb3RpY2UoXCJOaWNlIHRvIG1lZXQgeW91IVwiKVxufVxuXG5mdW5jdGlvbiBleHRyYWN0X3RpdGxlX2FuZF9ub3RlKHRleHQ6IHN0cmluZyl7XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiB0YWtlcyBhbGwgdGhlIHRleHQgaW4gdGhlIGZpbGUgYW5kIHJldHVybnMgdGhlIHRpdGxlIGFuZCB0aGUgYm9keSBvZiB0aGUgbm90ZS5cbiAgICAgKiBUaGUgc3BsaXQgaGFwcGVucyBiYXNlZCBvbiBoMSBoZWFkZXIuIFxuICAgICAqIFRoaXMgbWVhbnMgc3Vic3RyaW5nc1swXSBpcyB1c3VhbGx5IHRoZSBkYXRhIGJlZm9yZSB0aGUgdGl0bGUuXG4gICAgICogc3Vic3RyaW5nc1sxXSBpcyB1c3VhbGx5IHRoZSBib2R5IG9mIHRoZSBub3RlXG4gICAgICogaWYgdGhlcmUgaXMgc3Vic3RyaW5nIFsyXSwgdGhpcyBtZWFucyB0aGVyZSBpcyBhbm90aGVyIGgxIGhlYWRlciAodXN1YWxseSAjIFN0b3AgSW5kZXhpbmcpXG4gICAgICogRG93bnN0cmVhbSB0YXNrcyBvbmx5IGRlYWxzIHdpdGggc3Vic3RyaW5nWzFdIGFzIHRoZSBub3RlOyBpLmUgaW5mb3JtYXRpb24gYWZ0ZXIgdGhlIFN0b3AgSW5kZXhpbmcgYXJlIGV4ZWNsdWRlZFxuICAgICAqL1xuXG4gICAgICAgIC8vP2dtIG1lYW5zIHN0cmluZyBpcyBtdWx0aWxpbmVzLCBhbmQgXiB3b3VsZCBjYXRjaCBiZWdpbm5pbmcgb2YgZXZlcnkgbGluZSBub3QganVzdCBiZWdpbm5pbmcgb2YgdGhlIHN0cmluZyFcbiAgICAgICAgbGV0IHBhdHRlcm4gPSAvXiMgLipcXG4vZ207XG4gICAgICAgIGxldCBtYXRjaGVzID0gdGV4dC5tYXRjaChwYXR0ZXJuKTtcbiAgICAgICAgbGV0IHRpdGxlID0gJydcbiAgICAgICAgaWYobWF0Y2hlcyl7XG4gICAgICAgICAgICB0aXRsZSA9IG1hdGNoZXNbMF1cbiAgICAgICAgfVxuICAgICAgICBsZXQgc3Vic3RyaW5ncyA9IHRleHQuc3BsaXQocGF0dGVybilcbiAgICAgICAgY29uc29sZS5sb2coYFRpdGxlOiAke3RpdGxlfWApXG4gICAgICAgIGNvbnNvbGUubG9nKHN1YnN0cmluZ3MpXG5cbiAgICAgICAgcmV0dXJuIFt0aXRsZSwgc3Vic3RyaW5nc11cblxufVxuXG5mdW5jdGlvbiBleHRyYWN0X3N1bW1hcnkoZnVsbF9ub3RlOnN0cmluZyl7XG4gICAgLy9XaGVuIGEgbm90ZSBpcyByZWFkeSAoaGFzIGdwdF9zdW1tYXJpemVkIGFuZCBBZmZpbml0eSB0YWdzKSwgZXh0cmFjdCB0aGUgc3VtbWFyeSBmcm9tIGZ1bGwgdGV4dFxuICAgIGxldCBzdWJzdHJpbmdzID0gZnVsbF9ub3RlLnNwbGl0KCcjIFN0b3AgSW5kZXhpbmcnKVxuICAgIGxldCBzdW1tYXJ5ID0gc3Vic3RyaW5nc1swXVxuICAgIC8vY29uc29sZS5sb2coYFN1bW1hcnk6ICR7c3VtbWFyeX1gKVxuICAgIHJldHVybiBzdW1tYXJ5XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZV9hZmZpbml0eShub3RlOiBzdHJpbmcsIGVudGl0eV9uYW1lOnN0cmluZywgc2NyaXB0TmFtZTogc3RyaW5nKXtcbiAgICBjb25zdCBzY3JpcHRQYXRoID0gc2NyaXB0UGF0aF9BSVxuICAgIGlmIChzY3JpcHROYW1lID09ICdhZmZpbml0eV92Y19oZWxwZXIucHknKXtcbiAgICAgICAgdmFyIGFyZ3MgPSBbZW50aXR5X25hbWUsIG5vdGUsIGFmZmluaXR5QVBJS2V5LCBvd25lcl92YWx1ZSwgY29ubmVjdGlvbl9vd25lcl9maWVsZCwgdmVudHVyZV9uZXR3b3JrX2xpc3RdXG5cbiAgICB9XG4gICAgZWxzZXtcbiAgICAgICAgdmFyIGFyZ3MgPSBbZW50aXR5X25hbWUsIG5vdGUsIGFmZmluaXR5QVBJS2V5LCBvd25lcl92YWx1ZV1cblxuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmxvZyhcIlVwZGF0ZSBBZmZpbml0eVwiKVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbGF1bmNoX3B5dGhvbihweXRob25QYXRoLCBzY3JpcHRQYXRoLCBzY3JpcHROYW1lLCBhcmdzKVxuXG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UpXG4gICAgcmV0dXJuIHJlc3BvbnNlXG5cbn1cblxuZnVuY3Rpb24gdmNfcmVhZHlfZm9yX2FmZmluaXR5KGZpbGVfY29udGVudDogc3RyaW5nKXtcbiAgICByZXR1cm4gZmlsZV9jb250ZW50LmluY2x1ZGVzKCcjZ3B0X3N1bW1hcml6ZWQnKSAmJiBmaWxlX2NvbnRlbnQuaW5jbHVkZXMoJyNBZmZpbml0eScpXG59XG5cbmZ1bmN0aW9uIHN0YXJ0dXBfcmVhZHlfZm9yX2FmZmluaXR5KGZpbGVfY29udGVudDogc3RyaW5nKXtcbiAgICByZXR1cm4gKGZpbGVfY29udGVudC5pbmNsdWRlcygnI3N0YXJ0dXBzL3NjcmVlbmVkJykgJiYgZmlsZV9jb250ZW50LmluY2x1ZGVzKCcjQWZmaW5pdHknKSlcbn1cblxuZnVuY3Rpb24gbm90aWZ5X2Zvcl9taXNzaW5nX3Blb3BsZShwZXJzb25fbmFtZTogc3RyaW5nLCByZXNwb25zZTogYW55KXtcbiAgICAvKipcbiAgICAgKiBJZiBhIHBlcnNvbiBpcyBub3QgZm91bmQgaW4gYWZmaW5pdHksIHNlbmQgYSBub3RpZmljYXRpb24gYW5kIHJldHVybiBmYWxzZVxuICAgICAqL1xuICAgIGZvciAobGV0IGl0ZW0gb2YgcmVzcG9uc2Upe1xuICAgICAgICBpZiAoaXRlbS5pbmNsdWRlcygnT29wcycpKXtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFBlcnNvbjogJHtwZXJzb25fbmFtZX0gd2FzIG5vdCBmb3VuZGAsIDM2MDAwKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuXG4gICAgfSAgIFxuICAgIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBub3RpZnlfZm9yX21pc3Npbmdfc3RhcnR1cHMoc3RhcnR1cF9uYW1lOiBzdHJpbmcsIHJlc3BvbnNlOiBhbnkpe1xuICAgIGZvciAobGV0IGl0ZW0gb2YgcmVzcG9uc2Upe1xuICAgICAgICBpZihpdGVtLmluY2x1ZGVzKCdFcnJvcicpKXtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFN0YXJ0dXA6ICR7c3RhcnR1cF9uYW1lfSB3YXMgZm91bmQgYnV0IGNvdWxkIG5vdCBiZSB1cGRhdGVkYCwgMzYwMDApXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGl0ZW0uaW5jbHVkZXMoJ1N0YXJ0dXAnKSl7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBTdGFydHVwOiAke3N0YXJ0dXBfbmFtZX0gY291bGQgbm90IGJlIGZvdW5kYCwgMzYwMDApXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5hc3luYyBmdW5jdGlvbiBwdXNoX3Zjc190b19hZmZpbml0eSgpe1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gcHVzaGVzIGFsbCByZWFkeSBWQ3MgdG8gYWZmaW5pdHksIGl0IGFsc28gbm90aWZpZXMgdXMgaWYgYSBwZXJzb24gY2FuIG5vdCBiZSBmb3VuZCBvbiBhZmZpbml0eVxuICAgICAqL1xuICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpXG4gICAgZm9yIChsZXQgaXRlbSBvZiBmaWxlcyl7XG4gICAgICAgIGxldCBmaWxlX2NvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGl0ZW0pXG4gICAgICAgIGlmICh2Y19yZWFkeV9mb3JfYWZmaW5pdHkoZmlsZV9jb250ZW50KSl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBbdGl0bGUsIHN1YnN0cmluZ3NdID0gZXh0cmFjdF90aXRsZV9hbmRfbm90ZShmaWxlX2NvbnRlbnQpXG4gICAgICAgICAgICBsZXQgc3VtbWFyeSA9IHN1YnN0cmluZ3NbMV0gLy9leHRyYWN0X3N1bW1hcnkoc3Vic3RyaW5nc1sxXSlcbiAgICAgICAgICAgIGxldCBwZXJzb25fbmFtZSA9IFN0cmluZyh0aXRsZSlcbiAgICAgICAgICAgIGxldCBzY3JpcHROYW1lID0gJ2FmZmluaXR5X3ZjX2hlbHBlci5weSdcbiAgICAgICAgICAgIGxldCByZXNwb25zZTogYW55ID0gYXdhaXQgdXBkYXRlX2FmZmluaXR5KHN1bW1hcnksIHBlcnNvbl9uYW1lLCBzY3JpcHROYW1lKVxuICAgICAgICAgICAgaWYgKCFub3RpZnlfZm9yX21pc3NpbmdfcGVvcGxlKHBlcnNvbl9uYW1lLCByZXNwb25zZSkpe1xuICAgICAgICAgICAgICAgIC8vaWYgdGhlIHBlcnNvbiB3YXMgdXBkYXRlZCBvbiBhZmZpbml0eSBzdWNjZXNzZnVseSBhbmQgbm90IG1pc3NpbmcgZnJvbSBkYXRhYmFzZSwgcmVtb3ZlICNBZmZpbml0eSBmcm9tIHRleHRcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBWQzogJHtwZXJzb25fbmFtZX0gd2FzIHVwZGF0ZWQgb24gQWZmaW5pdHlgKVxuICAgICAgICAgICAgICAgIGZpbGVfY29udGVudCA9IGZpbGVfY29udGVudC5yZXBsYWNlKC8jQWZmaW5pdHkvZywgJycpXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGl0ZW0sIGZpbGVfY29udGVudClcblxuICAgICAgICAgICAgfVxuICAgICAgICBcblxuICAgICAgICB9XG5cbiAgICB9XG5cbn1cblxuXG5hc3luYyBmdW5jdGlvbiBwdXNoX3N0YXJ0dXBzX3RvX2FmZmluaXR5KCl7XG4gICAgLyoqXG4gICAgICogUHVzaCBhbGwgZWxpZ2libGUgc3RhcnR1cHMgdG8gYWZmaW5pdHkgKG5vdGlmeSBtZSBvdGhlcndpc2UpXG4gICAgICovXG4gICAgY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKClcbiAgICBmb3IgKGxldCBpdGVtIG9mIGZpbGVzKXtcbiAgICAgICAgbGV0IGZpbGVfY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoaXRlbSlcbiAgICAgICAgaWYgKHN0YXJ0dXBfcmVhZHlfZm9yX2FmZmluaXR5KGZpbGVfY29udGVudCkpe1xuICAgICAgICAgICAgbGV0IFt0aXRsZSwgc3Vic3RyaW5nc10gPSBleHRyYWN0X3RpdGxlX2FuZF9ub3RlKGZpbGVfY29udGVudClcbiAgICAgICAgICAgIGxldCBzdGFydHVwX25hbWUgPSBTdHJpbmcodGl0bGUpXG4gICAgICAgICAgICBsZXQgbm90ZSA9IHN1YnN0cmluZ3NbMV1cbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coYFN0YXJ0dXAgbmFtZTogJHtzdGFydHVwX25hbWV9YClcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coYE5vdGU6ICR7bm90ZX1gKVxuICAgICAgICAgICAgbGV0IHNjcmlwdE5hbWUgPSAnYWZmaW5pdHlfc3RhcnR1cF9oZWxwZXIucHknXG4gICAgICAgICAgICBsZXQgcmVzcG9uc2U6IGFueSA9IGF3YWl0IHVwZGF0ZV9hZmZpbml0eShub3RlLCBzdGFydHVwX25hbWUsIHNjcmlwdE5hbWUpXG5cbiAgICAgICAgICAgIGlmICghbm90aWZ5X2Zvcl9taXNzaW5nX3N0YXJ0dXBzKHN0YXJ0dXBfbmFtZSwgcmVzcG9uc2UpKXtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBTdGFydHVwOiAke3N0YXJ0dXBfbmFtZX0gd2FzIHVwZGF0ZWQgb24gQWZmaW5pdHlgKVxuICAgICAgICAgICAgICAgIGZpbGVfY29udGVudCA9IGZpbGVfY29udGVudC5yZXBsYWNlKC8jQWZmaW5pdHkvZywgJycpXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGl0ZW0sIGZpbGVfY29udGVudClcbiAgICAgICAgICAgIH1cblxuXG5cbiAgICAgICAgfVxuXG4gICAgfVxuICAgIG5ldyBOb3RpY2UoJ0RvbmUhJylcbn1cblxuZnVuY3Rpb24gaXNfc3VtbWFyaXphYmxlKGZpbGVfY29udGVudDogc3RyaW5nKXtcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgVkMgaXMgdG8gYmUgc3VtbWFyaXplZCAoSSBhbSBjb25uZWN0ZWQgd2l0aCB0aGVtIGFuZCB0aGV5IGFyZSBub3QgYWxyZWFkeSBzdW1tYXJpemVkKVxuICAgICAqL1xuICAgIHJldHVybiBmaWxlX2NvbnRlbnQuaW5jbHVkZXMoJyNuZXR3b3JrL2Nvbm5lY3RlZCcpICYmICggZmlsZV9jb250ZW50LmluY2x1ZGVzKCcjRW50aXR5L1ZDJykgfHwgZmlsZV9jb250ZW50LmluY2x1ZGVzKCcjUGVyc29uL1ZDJykgKSAmJiAoZmlsZV9jb250ZW50LmluY2x1ZGVzKCcjZ3B0X3N1bW1hcml6ZWQnKSAhPSB0cnVlKSAmJiAoZmlsZV9jb250ZW50LmluY2x1ZGVzKCdkYXRhdmlldycpICE9IHRydWUpXG5cbn1cblxuZnVuY3Rpb24gc2F2ZV9qc29uKGZpbGVfcGF0aDogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcgW10pe1xuICAgIGNvbnN0IGpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShjb250ZW50KVxuICAgIGZzLndyaXRlRmlsZShmaWxlX3BhdGgsIGpzb25TdHJpbmcsIChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coJ0ZpbGUgaGFzIGJlZW4gY3JlYXRlZCcpO1xuICAgICAgfSk7XG59XG5cbmludGVyZmFjZSBCdXRsZXJTZXR0aW5ncyB7XG5cdHZhdWx0UGF0aDogc3RyaW5nO1xuICAgIGFmZmluaXR5S2V5OiBzdHJpbmc7XG4gICAgb3BlbkFJS2V5OiBzdHJpbmc7XG4gICAgb3duZXJfcGVyc29uX3ZhbHVlOiBzdHJpbmc7XG4gICAgY29ubmVjdGlvbl9vd25lcl9maWVsZF9pZDogc3RyaW5nO1xuICAgIHZlbnR1cmVfbmV0d29ya19saXN0X2lkOiBzdHJpbmc7XG4gICAgcHl0aG9uUGF0aDogc3RyaW5nXG5cbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogQnV0bGVyU2V0dGluZ3MgPSB7XG5cdHZhdWx0UGF0aDogJ2RlZmF1bHQnLFxuICAgIGFmZmluaXR5S2V5OiAnZGVmYXVsdCcsXG4gICAgb3BlbkFJS2V5OiAnZGVmYXVsdCcsXG4gICAgb3duZXJfcGVyc29uX3ZhbHVlOiAnMTAnLFxuICAgIGNvbm5lY3Rpb25fb3duZXJfZmllbGRfaWQ6ICcxMDAnLFxuICAgIHZlbnR1cmVfbmV0d29ya19saXN0X2lkOiAnNTAwJyxcbiAgICBweXRob25QYXRoOiAnPHBhdGgtdG8tdmlydHVhbC1lbnY+J1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZDV2l6YXJkUGx1Z2luIGV4dGVuZHMgUGx1Z2lue1xuICAgIHNldHRpbmdzOiBCdXRsZXJTZXR0aW5ncztcbiAgICBzdGF0dXM6IEhUTUxFbGVtZW50O1xuICAgIGFzeW5jIG9ubG9hZCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSB0aGlzLmFkZFN0YXR1c0Jhckl0ZW0oKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucmVnaXN0ZXJWaWV3KFdJWkFSRF9WSUVXLCAobGVhZik9PiBuZXcgV2l6YXJkVmlldyhsZWFmKSlcbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoKCkgPT4ge1xuXHRcdFx0dGhpcy5hY3RpdmF0ZVZpZXcoKTtcblx0XHRcdHRoaXMudXBkYXRlVmlldyhbXSk7XG5cdFx0fSk7XG5cbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKCdzdW4nLCAnT21hciBQbHVnaW4nLCBjcmVhdGVfbm90aWNlKVxuICAgICAgICAgICAgXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7aWQ6ICdzdW1tYXJpemUtc3RhcnR1cC1jb21tYW5kJywgbmFtZTogJ1N1bW1hcml6ZSBUaGlzIFN0YXJ0dXAnLCBlZGl0b3JDYWxsYmFjazogKGVkaXRvciwgdmlldykgPT4gc3VtbWFyaXplX3NlbGVjdGVkX3N0YXJ0dXBfdGV4dChlZGl0b3IsIHZpZXcpfSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7aWQ6ICdpbmRleC12YXVsdCcsIG5hbWU6ICdJbmRleCBWYXVsdCcsIGNhbGxiYWNrOiAoKSA9PiB0aGlzLmluZGV4X3ZhdWx0KCl9KVxuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7aWQ6ICdmaW5kLXNpbWlsYXItaWRlYXMnLCBuYW1lOiAnRmluZCBTaW1pbGFyIElkZWFzJywgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3IsIHZpZXcpID0+IHRoaXMuZmluZF9zaW1pbGFyX2lkZWFzKGVkaXRvciwgdmlldyl9KVxuICAgIFxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe2lkOiAnc3VtbWFyaXplLWFsbC12Yy1jb21tYW5kJywgbmFtZTogJ1N1bW1hcml6ZSBBbGwgVkMgTm90ZXMnLCBjYWxsYmFjazogKCkgPT4gdGhpcy5zdW1tYXJpemVfYWxsX3ZjKCl9KVxuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7aWQ6ICdhZmZpbml0eS12YycsIG5hbWU6ICdQdXNoIFZDcyB0byBBZmZpbml0eScsIGNhbGxiYWNrOiAoKSA9PiBwdXNoX3Zjc190b19hZmZpbml0eSgpfSlcblxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe2lkOiAnYWZmaW5pdHktc3RhcnR1cCcsIG5hbWU6ICdQdXNoIFN0YXJ0dXBzIHRvIEFmZmluaXR5JywgY2FsbGJhY2s6ICgpID0+IHB1c2hfc3RhcnR1cHNfdG9fYWZmaW5pdHkoKX0pXG5cbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTYW1wbGVTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG4gICAgXG4gICAgfVxuXG4gICAgb251bmxvYWQoKSB7XG4gICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5kZXRhY2hMZWF2ZXNPZlR5cGUoV0laQVJEX1ZJRVcpXG5cbiAgICB9XG5cbiAgICBhc3luYyBhY3RpdmF0ZVZpZXcoKSB7XG5cdFx0dGhpcy5hcHAud29ya3NwYWNlLmRldGFjaExlYXZlc09mVHlwZShXSVpBUkRfVklFVyk7XG5cdFx0XG5cdFx0YXdhaXQgdGhpcy5hcHAud29ya3NwYWNlLmdldFJpZ2h0TGVhZihmYWxzZSkuc2V0Vmlld1N0YXRlKHtcblx0XHQgIHR5cGU6IFdJWkFSRF9WSUVXLFxuXHRcdCAgYWN0aXZlOiB0cnVlLFxuXHRcdH0pO1xuXHRcblx0XHR0aGlzLmFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZihcblx0XHQgIHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoV0laQVJEX1ZJRVcpWzBdXG5cdFx0KTtcblx0fVxuICAgIGFzeW5jIHVwZGF0ZVZpZXcocmVzdWx0czogYW55KSB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFdJWkFSRF9WSUVXKVswXT8udmlldztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBXaXphcmRWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LnVwZGF0ZShyZXN1bHRzKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgIH1cblxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpe1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgICAgICAgc2NyaXB0UGF0aF9BSSA9IHRoaXMuc2V0dGluZ3MudmF1bHRQYXRoICsgJy5vYnNpZGlhbi9wbHVnaW5zL3ZjX3dpemFyZCdcbiAgICAgICAgb3BlbmFpQVBJS2V5ID0gdGhpcy5zZXR0aW5ncy5vcGVuQUlLZXlcbiAgICAgICAgYWZmaW5pdHlBUElLZXkgPSB0aGlzLnNldHRpbmdzLmFmZmluaXR5S2V5XG4gICAgICAgIG93bmVyX3ZhbHVlID0gdGhpcy5zZXR0aW5ncy5vd25lcl9wZXJzb25fdmFsdWVcbiAgICAgICAgY29ubmVjdGlvbl9vd25lcl9maWVsZCA9IHRoaXMuc2V0dGluZ3MuY29ubmVjdGlvbl9vd25lcl9maWVsZF9pZFxuICAgICAgICB2ZW50dXJlX25ldHdvcmtfbGlzdCA9IHRoaXMuc2V0dGluZ3MudmVudHVyZV9uZXR3b3JrX2xpc3RfaWRcbiAgICAgICAgcHl0aG9uUGF0aCA9IHRoaXMuc2V0dGluZ3MucHl0aG9uUGF0aFxuICAgIH1cblxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpe1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpXG4gICAgICAgIHNjcmlwdFBhdGhfQUkgPSB0aGlzLnNldHRpbmdzLnZhdWx0UGF0aCArICcub2JzaWRpYW4vcGx1Z2lucy92Y193aXphcmQnXG4gICAgICAgIG9wZW5haUFQSUtleSA9IHRoaXMuc2V0dGluZ3Mub3BlbkFJS2V5XG4gICAgICAgIGFmZmluaXR5QVBJS2V5ID0gdGhpcy5zZXR0aW5ncy5hZmZpbml0eUtleVxuICAgICAgICBvd25lcl92YWx1ZSA9IHRoaXMuc2V0dGluZ3Mub3duZXJfcGVyc29uX3ZhbHVlXG4gICAgICAgIGNvbm5lY3Rpb25fb3duZXJfZmllbGQgPSB0aGlzLnNldHRpbmdzLmNvbm5lY3Rpb25fb3duZXJfZmllbGRfaWRcbiAgICAgICAgdmVudHVyZV9uZXR3b3JrX2xpc3QgPSB0aGlzLnNldHRpbmdzLnZlbnR1cmVfbmV0d29ya19saXN0X2lkXG4gICAgICAgIHB5dGhvblBhdGggPSB0aGlzLnNldHRpbmdzLnB5dGhvblBhdGhcbiAgICB9XG5cbiAgICBhc3luYyBzdW1tYXJpemVfYWxsX3ZjKCl7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIHN1bW1hcml6ZWQgYWxsIFZDIG5vdGVzIHRoYXQgYXJlIGVsaWdpYmxlIGZvciBzdW1tYXJpemF0aW9uIChwZW9wbGUgb3IgZW50aXRpZXMgSSBhbSBjb25uZWN0ZWQgd2l0aClcbiAgICAgICAgICovXG5cbiAgICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKClcbiAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBmaWxlcyl7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGl0ZW0ubmFtZSlcbiAgICAgICAgICAgIGxldCBmaWxlX2NvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGl0ZW0pXG4gICAgICAgICAgICBpZiAoaXNfc3VtbWFyaXphYmxlKGZpbGVfY29udGVudCkpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBXZSBhcmUgY2hhbmdpbmcgZmlsZTogJHtpdGVtLm5hbWV9YClcbiAgICAgICAgICAgICAgICAvL1dlIHNob3VsZCBzdW1tYXJpemUgdGhpcyBmaWxlIHRoZW5cbiAgICAgICAgICAgICAgICBsZXQgW25ld190ZXh0LCBzdW1tYXJ5LCB0aXRsZV0gPSBhd2FpdCBzdW1tYXJpemVfdmNfdGV4dChmaWxlX2NvbnRlbnQpXG4gICAgICAgICAgICAgICAgaWYgKHRpdGxlICE9ICcnKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGl0ZW0sIG5ld190ZXh0KVxuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGAke3RpdGxlfSBoYXMgYmVlbiBzdW1tYXJpemVkYClcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcblxuICAgICAgICAvL3ZhdWx0LlxuXG4gICAgICAgIFxuXG4gICAgfVxuICAgIGFzeW5jIGZpbmRfc2ltaWxhcl9pZGVhcyhlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3fE1hcmtkb3duRmlsZUluZm8pe1xuICAgICAgICBjb25zdCBzZWwgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKClcbiAgICAgICAgbmV3IE5vdGljZShcIlNlYXJjaCBpbiBwcm9ncmVzLi4uXCIpXG4gICAgICAgIGxldCBzY3JpcHRQYXRoID0gc2NyaXB0UGF0aF9BSVxuICAgICAgICBjb25zdCBzY3JpcHROYW1lID0gJ3NpbWlsYXJfaWRlYXMucHknXG4gICAgICAgIHZhciBhcmdzID0gW3NlbCwgb3BlbmFpQVBJS2V5LCB0aGlzLnNldHRpbmdzLnZhdWx0UGF0aF1cbiAgICAgICAgY29uc29sZS5sb2coYXJncylcbiAgICAgICAgY29uc29sZS5sb2cocHl0aG9uUGF0aClcbiAgICAgICAgY29uc29sZS5sb2coc2NyaXB0UGF0aCksXG4gICAgICAgIGNvbnNvbGUubG9nKHNjcmlwdE5hbWUpXG4gICAgICAgIGNvbnN0IHNpbWlsYXJfaWRlYXMgPSBhd2FpdCBsYXVuY2hfcHl0aG9uKHB5dGhvblBhdGgsIHNjcmlwdFBhdGgsIHNjcmlwdE5hbWUsIGFyZ3MpIGFzIHN0cmluZyBbXSAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKHNpbWlsYXJfaWRlYXMpXG4gICAgICAgIGxldCBzZWFyY2hfcmVzdWx0cyA9IGF3YWl0IHRoaXMuZXh0cmFjdF90aXRsZV9hbmRfcGF0aChzaW1pbGFyX2lkZWFzKVxuICAgICAgICBjb25zb2xlLmxvZygnU2VhcmNoIHJlc3VsdHM6XFxuJylcbiAgICAgICAgY29uc29sZS5sb2coc2VhcmNoX3Jlc3VsdHMpXG4gICAgICAgIHRoaXMudXBkYXRlVmlldyhzZWFyY2hfcmVzdWx0cylcbiAgICBcbiAgICBcbiAgICB9XG4gICAgYXN5bmMgaW5kZXhfdmF1bHQoKXtcbiAgICAgICAgbGV0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpXG4gICAgICAgIGxldCBzY3JpcHRQYXRoID0gc2NyaXB0UGF0aF9BSVxuICAgICAgICBjb25zdCBzY3JpcHROYW1lID0gJ2luZGV4X3ZhdWx0LnB5J1xuICAgICAgICBjb25zdCBwbHVnaW5fcGF0aCA9IHNjcmlwdFBhdGhfQUlcbiAgICAgICAgbGV0IGZpbGVfcGF0aHMgPSBbXVxuICAgICAgICBmb3IobGV0IGZpbGUgb2YgZmlsZXMpe1xuICAgICAgICAgICAgaWYgKGZpbGUucGF0aC5pbmNsdWRlcygnU2Vjb25kIEJyYWluJykgfHwgZmlsZS5wYXRoLmluY2x1ZGVzKCdSZWFkd2lzZScpKXsgIC8vKCFmaWxlLnBhdGguaW5jbHVkZXMoJ1Jlc291cmNlcycpICYmICFmaWxlLnBhdGguaW5jbHVkZXMoJ1Jlc291cmNlcycpKXtcbiAgICAgICAgICAgICAgICBmaWxlX3BhdGhzLnB1c2goZmlsZS5wYXRoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGpzb25fcGF0aCA9IHBsdWdpbl9wYXRoICsgJy8nICsgJ2ZpbGVfcGF0aHMuanNvbidcbiAgICAgICAgc2F2ZV9qc29uKGpzb25fcGF0aCwgZmlsZV9wYXRocylcbiBcbiAgICAgICAgXG4gICAgICAgIHZhciBhcmdzID0gW2pzb25fcGF0aCwgb3BlbmFpQVBJS2V5LCBwbHVnaW5fcGF0aF1cblxuICAgICAgICAvL2NvbnNvbGUubG9nKGZpbGVfcGF0aHMpXG4gICAgICAgIC8qY29uc3Qge3NwYXdufSA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpICAgICAgICBcbiAgICAgICAgY29uc3QgcHl0aG9uID0gc3Bhd24ocHl0aG9uUGF0aCwgW3NjcmlwdFBhdGggKyAnLycgKyBzY3JpcHROYW1lIF0pXG4gICAgICAgIGNvbnN0IGJ1ZmZlcnM6IGFueVtdID0gW107XG4gICAgICAgIC8vV2hlbiBweXRob24gaXMgc2VuZGluZyBkYXRhXG4gICAgICAgIHB5dGhvbi5zdGRvdXQub24oJ2RhdGEnLCAoY2h1bms6IGFueSkgPT4gYnVmZmVycy5wdXNoKGNodW5rKSlcbiAgICAgICAgLy93aGVuIHB5dGhvbiBzdG9wcyBzZW5kaW5nIGRhdGFcbiAgICAgICAgcHl0aG9uLnN0ZG91dC5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgSlNPTi5wYXJzZShCdWZmZXIuY29uY2F0KGJ1ZmZlcnMpKVxuICAgICAgICAgICAgY29uc29sZS5sb2coYnVmZmVycylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcHl0aG9uLnN0ZGluLndyaXRlKEpTT04uc3RyaW5naWZ5KGZpbGVfcGF0aHMpKTtcbiAgICAgICAgcHl0aG9uLnN0ZGluLmVuZCgpKi9cblxuICAgICAgICAvL2xldCByZXN1bHRzID0gYXdhaXQgbGF1bmNoX3B5dGhvbihweXRob25QYXRoLCBzY3JpcHRQYXRoLCBzY3JpcHROYW1lLCBhcmdzKVxuICAgICAgICAvL2NvbnNvbGUubG9nKHJlc3VsdHMpXG4gICAgfVxuICAgIGFzeW5jIGV4dHJhY3RfdGl0bGVfYW5kX3BhdGgocmVzdWx0czogc3RyaW5nW10pe1xuICAgICAgICBcbiAgICAgICAgLy9jb25zb2xlLmxvZyhhbGxfZmlsZXMpXG4gICAgICAgIGxldCBjb3VudGVyID0gMFxuICAgICAgICBsZXQgc2VhcmNoX3Jlc3VsdHM6IGFueSA9IHt9IC8veydzZW50ZW5jZXMnOiBbXSwgJ3NvdXJjZV9uYW1lJzogW10sICdzb3VyY2VfcGF0aCc6IFtdfVxuICAgICAgICBsZXQgY3VycmVudF9maWxlbmFtZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk/LmJhc2VuYW1lXG4gICAgICAgIGNvbnNvbGUubG9nKGBjdXJyZW50IGZpbGVuYW1lOiAke2N1cnJlbnRfZmlsZW5hbWV9YClcbiAgICAgICAgZm9yIChsZXQgcmVzdWx0IG9mIHJlc3VsdHMpe1xuICAgICAgICAgIGlmIChjb3VudGVyICUgMyA9PSAwICYmIGNvdW50ZXIhPSAwKVxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGxldCBzZW50ZW5jZSA9ICdcXFwiJyArIHJlc3VsdHMuYXQoY291bnRlcikgKyAnXFxcIidcbiAgICAgICAgICAgIGxldCBzb3VyY2UgPSByZXN1bHRzLmF0KGNvdW50ZXIrMilcbiAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZT8uc3BsaXQoJzonKVsxXS50cmltKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coYGNvdW50ZXI6ICR7Y291bnRlcn0sIFRoaXMgc291cmNlOiAke3NvdXJjZX1gKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihzb3VyY2UgPT0gY3VycmVudF9maWxlbmFtZSl7XG4gICAgICAgICAgICAgICAgLy9EbyBub3QgYWRkIHJlc3VsdHMgZnJvbSB0aGUgY3VycmVudCBmaWxlXG4gICAgICAgICAgICAgICAgY291bnRlciA9IGNvdW50ZXIgKyAxXG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzb3VyY2VfZmlsZSA9IGF3YWl0IHRoaXMuZ2V0X3BhdGhfYnlfbmFtZShzb3VyY2UpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzb3VyY2VfZmlsZSlcbiAgICAgICAgICAgIGlmIChzb3VyY2VfZmlsZSAhPSBudWxsICYmIHNvdXJjZSAhPSBudWxsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxldCBvYnNpZGlhbl9wYXRoID0gJ29ic2lkaWFuOi8vYWR2YW5jZWQtdXJpP3ZhdWx0PScgLy9vcGVuIC0gYWR2YW5jZWQtdXJpXG4gICAgICAgICAgICAgICAgb2JzaWRpYW5fcGF0aCA9IG9ic2lkaWFuX3BhdGggKyB0aGlzLmFwcC52YXVsdC5nZXROYW1lKCkgKyAnJmZpbGVwYXRoPScgLy9maWxlIC0gZmlsZXBhdGhcbiAgICAgICAgICAgICAgICAvL2xldCBzb3VyY2VfcGF0aCA9IHNvdXJjZV9maWxlLnBhdGggLy90aGlzLmFwcC52YXVsdC5nZXRSZXNvdXJjZVBhdGgoc291cmNlX2ZpbGUpXG4gICAgICAgICAgICAgICAgb2JzaWRpYW5fcGF0aCA9IG9ic2lkaWFuX3BhdGggKyBzb3VyY2VfZmlsZS5wYXRoXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYG15IHNvdXJjZSBwYXRoOiAke29ic2lkaWFuX3BhdGh9YClcbiAgICAgICAgICAgICAgICBzZWFyY2hfcmVzdWx0c1tzb3VyY2VdID0geydzb3VyY2VfcGF0aCc6b2JzaWRpYW5fcGF0aCwgJ3RleHQnOiBzZW50ZW5jZX0gXG5cbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBcblxuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICBjb3VudGVyID0gY291bnRlciArIDFcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VhcmNoX3Jlc3VsdHNcbiAgICB9XG4gICAgYXN5bmMgZ2V0X3BhdGhfYnlfbmFtZShzb3VyY2U6IHN0cmluZ3x1bmRlZmluZWQpe1xuICAgICAgICBsZXQgYWxsX2ZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpXG4gICAgICAgIGZvciAobGV0IGZpbGUgb2YgYWxsX2ZpbGVzKXtcbiAgICAgICAgICAgIGxldCBmaWxlbmFtZSA9IGZpbGUuYmFzZW5hbWVcbiAgICAgICAgICAgIGlmIChmaWxlbmFtZSA9PSBzb3VyY2Upe1xuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGxcblxuXG4gICAgfVxufVxuXG5jbGFzcyBTYW1wbGVTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYntcbiAgICBwbHVnaW46IFZDV2l6YXJkUGx1Z2luXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogVkNXaXphcmRQbHVnaW4pe1xuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbilcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW5cbiAgICB9XG4gICAgZGlzcGxheSgpOiB2b2lkIHtcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcblxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7dGV4dDogJ1NldHRpbmdzIGZvciB5b3VyIGJ1dGxlcid9KTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ09ic2lkaWFuIFZhdWx0IFBhdGgnKVxuXHRcdFx0LnNldERlc2MoJ1RoZSBwYXRoIHRvIHRoZSB2YXVsdCB3aGVyZSB5b3Ugd2lzaCB0byB1c2UgdGhlIHBsdWdpbicpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdFbnRlciBwYXRoJylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnZhdWx0UGF0aClcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdwYXRoOiAnICsgdmFsdWUpO1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnZhdWx0UGF0aCA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAuc2V0TmFtZSgnT3BlbkFJIEFQSSBLZXknKVxuICAgICAgICAuc2V0RGVzYygnWW91ciBPcGVuQUkgQVBJIEtleScpXG4gICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdFbnRlciBrZXknKVxuICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm9wZW5BSUtleSlcbiAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnT3BlbiBBSSBrZXk6ICcgKyB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mub3BlbkFJS2V5ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAuc2V0TmFtZSgnQWZmaW5pdHk6IEFQSSBLZXknKVxuICAgICAgICAuc2V0RGVzYygnWW91ciBBZmZpbml0eSBBUEkgS2V5JylcbiAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIGtleScpXG4gICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYWZmaW5pdHlLZXkpXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2tleTogJyArIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hZmZpbml0eUtleSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgLnNldE5hbWUoJ0FmZmluaXR5OiBPd25lciBWYWx1ZScpXG4gICAgICAgIC5zZXREZXNjKCdFdmVyeSBwZXJzb24gaGFzIGEgY29kZSBvbiBBZmZpbml0eS4gUGxlYXNlIGdpdmUgaW4gdGhlIGNvZGUgZm9yIHRoZSBwZXJzb24gdGhhdCBzaG91bGQgYmUgYWRkZWQgYXMgb3duZXIgb2Ygc3RhcnR1cHMgYW5kIFZDcyB0aGF0IGdldHMgcHVzaGVkJylcbiAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHZhbHVlJylcbiAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5vd25lcl9wZXJzb25fdmFsdWUpXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ093bmVyIHZhbHVlOiAnICsgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm93bmVyX3BlcnNvbl92YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgLnNldE5hbWUoJ0FmZmluaXR5OiBDb25uZWN0aW9uIE93bmVyIEZpZWxkIElEJylcbiAgICAgICAgLnNldERlc2MoJ0RlcGVuZGluZyBvbiB0aGUgbGlzdCB5b3Ugc2F2ZSBmZWxsb3cgVkNzIGluLCB0aGVyZSBpcyBhIGZpZWxkIHRoYXQgcmVwcmVzZW50IHRoZSBcXCdjb25uZWN0aW9uIG93bmVyIHdpdGggdGhlIGZ1bmRcXCcsIGVudGVyIHRoZSBmaWVsZCBpZCBoZXJlJylcbiAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHZhbHVlJylcbiAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb25uZWN0aW9uX293bmVyX2ZpZWxkX2lkKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb25uZWN0aW9uIE93bmVyIEZpZWxkIElEIHZhbHVlOiAnICsgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbm5lY3Rpb25fb3duZXJfZmllbGRfaWQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgIC5zZXROYW1lKCdBZmZpbml0eTogVmVudHVyZSBOZXR3b3JrIExpc3QgSUQnKVxuICAgICAgICAuc2V0RGVzYygnUGxlYXNlIGVudGVyIHRoZSBsaXN0IGlkIGZvciB0aGUgbGlzdCB5b3Ugc2F2ZSB5b3VyIHJlbGF0aW9uc2hpcHMgd2l0aCBWQ3MgaW4nKVxuICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgdmFsdWUnKVxuICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnZlbnR1cmVfbmV0d29ya19saXN0X2lkKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdWZW50dXJlIG5ldHdvcmsgbGlzdCBpZDogJyArIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy52ZW50dXJlX25ldHdvcmtfbGlzdF9pZCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgLnNldE5hbWUoJ1B5dGhvbiBWaXJ0dWFsIEVudmlyb25tZW50IFBhdGgnKVxuICAgICAgICAuc2V0RGVzYygnVGhlIHBhdGggdG8gcHl0aG9uIHZpcnR1YWwgZW52aXJvbm1lbnQnKVxuICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgcGF0aCcpXG4gICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHl0aG9uUGF0aClcbiAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUHl0aG9uUGF0aDogJyArIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5weXRob25QYXRoID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICB9KSk7XG5cdH1cblxufSIsICJpbXBvcnQgeyBJdGVtVmlldywgV29ya3NwYWNlTGVhZiB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgY29uc3QgV0laQVJEX1ZJRVcgPSBcIndpemFyZC12aWV3XCI7XG5cbmV4cG9ydCBjbGFzcyBXaXphcmRWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xuICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmKSB7XG4gICAgc3VwZXIobGVhZik7XG4gIH1cblxuICBnZXRWaWV3VHlwZSgpIHtcbiAgICByZXR1cm4gV0laQVJEX1ZJRVc7XG4gIH1cblxuICBnZXREaXNwbGF5VGV4dCgpIHtcbiAgICByZXR1cm4gXCJFeGFtcGxlIHZpZXdcIjtcbiAgfVxuXG4gIGFzeW5jIG9uT3BlbigpIHtcbiAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuWzFdO1xuICAgIGNvbnRhaW5lci5lbXB0eSgpO1xuICAgIGNvbnRhaW5lci5jcmVhdGVFbChcImg0XCIsIHsgdGV4dDogXCJFeGFtcGxlIHZpZXdcIiB9KTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZShzZWFyY2hfcmVzdWx0czogYW55KXsgLy9cbiAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuWzFdO1xuICAgIC8vY29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHt0ZXh0OiBcIkhlbGxvIFdvcmxkXCJ9KVxuICAgIGNvbnRhaW5lci5lbXB0eSgpXG4gICAgY29uc3Qgb3V0ZXJEaXYgPSBjb250YWluZXIuY3JlYXRlRWwoXCJoNFwiLCB7dGV4dDogXCJSZXN1bHRzXFxuXCJ9KTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzZWFyY2hfcmVzdWx0cyl7XG5cbiAgICAgIGxldCBzb3VyY2VfbmFtZSA9IGtleVxuICAgICAgbGV0IHNvdXJjZV9wYXRoID0gc2VhcmNoX3Jlc3VsdHNba2V5XVsnc291cmNlX3BhdGgnXVxuICAgICAgbGV0IHRleHQgPSBzZWFyY2hfcmVzdWx0c1trZXldWyd0ZXh0J11cbiAgICAgIGNvbnN0IHF1b3RlID0gY29udGFpbmVyLmNyZWF0ZUVsKFwiYmxvY2txdW90ZVwiLCB7dGV4dDogdGV4dCwgY2xzOiBcInF1b3RlXCJ9KVxuICAgICAgY29uc3QgbGluayA9IHF1b3RlLmNyZWF0ZUVsKFwiYVwiLCB7IGhyZWY6IHNvdXJjZV9wYXRoLCBhdHRyOiB7IFwiZGF0YS1wYXRoXCI6IHNvdXJjZV9wYXRoIH0gfSk7XG4gICAgICBsaW5rLmNyZWF0ZUVsKFwic3BhblwiLCB7ICAgXG4gICAgICAgICAgICAgICAgICB0ZXh0OiAnXFxuLS0nICsgc291cmNlX25hbWUgXG4gICAgICAgICAgfVxuICAgICAgKTtcblxuXG5cbiAgICB9XG5cbiAgICAvL2NvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7dGV4dDogcmVzdWx0cy5hdCgwKX0pXG4gICAgLy9vdXRlckRpdi5jcmVhdGVFbChcImRpdlwiLCB7IHRleHQ6IFwiXCIgfSk7XG4gICAgLy9vdXRlckRpdi5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJvdXRnb2luZy1saW5rLWhlYWRlclwiLCB0ZXh0OiBcIlx1MjZGMFwiIH0pO1xuICAgIFxuXG4gIH1cblxuICBhc3luYyBvbkNsb3NlKCkge1xuICAgIC8vIE5v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
